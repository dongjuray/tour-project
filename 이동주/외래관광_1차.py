# -*- coding: utf-8 -*-
"""외래관광 1차.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/161nIL8KGovAVKFNga4XM0yOxkBp_CSPC
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install koreanize-matplotlib
# import koreanize_matplotlib
# import matplotlib.pyplot as plt
# import pandas as pd

df_2020 = pd.read_excel('/content/2020년 외래관광객조사_원자료.xlsx')

df_2021 = pd.read_excel('/content/2021년 외래관광객조사 원자료.xlsx')

df_2022 = pd.read_excel('/content/2022 외래관광객조사_Data.xlsx')

df_2023 = pd.read_excel('/content/2023 외래관광객조사 DATA.xlsx')

df_2024 = pd.read_excel('/content/2024 외래관광객조사_Data.xlsx')

print(pivot_table.columns)
print(pivot_table.columns.dtype)

df_2020['year'] = 2020
df_2021['year'] = 2021
df_2022['year'] = 2022
df_2023['year'] = 2023
df_2024['year'] = 2024

# 그 후 concat
full_df = pd.concat([df_2020, df_2021, df_2022, df_2023, df_2024], ignore_index=True)

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns


# 피벗 테이블 생성: 국가 x 연도별 방문자수
pivot = full_df.groupby(['D_NAT', 'year']).size().reset_index(name='visitors')
pivot_table = pivot.pivot(index='D_NAT', columns='year', values='visitors').fillna(0)

# ============================
# [2] CAGR 계산
# ============================

years = sorted(pivot_table.columns.astype(str))
start_year = years[0]
end_year = years[-1]
n = int(end_year) - int(start_year)

# CAGR 공식 적용
start_year = int(start_year)
end_year = int(end_year)

pivot_table['CAGR'] = ((pivot_table[end_year] / pivot_table[start_year]) ** (1 / n) - 1) * 100


# ============================
# [3] 최근 방문자수 변수 추가
# ============================

pivot_table['recent_visitors'] = pivot_table[end_year]

# ============================
# [4] 변수 선택 및 스케일링
# ============================

X = pivot_table[['CAGR', 'recent_visitors']].copy()
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# ============================
# [5] Elbow method로 최적 클러스터 수 탐색
# ============================

inertia = []
K_range = range(1, 10)
for k in K_range:
    km = KMeans(n_clusters=k, random_state=42)
    km.fit(X_scaled)
    inertia.append(km.inertia_)

plt.plot(K_range, inertia, marker='o')
plt.xlabel('k')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal k')
plt.show()

# 예시로 k=3 선택
k_optimal = 3

# ============================
# [6] 최종 KMeans 클러스터링
# ============================

kmeans = KMeans(n_clusters=k_optimal, random_state=42)
pivot_table['cluster'] = kmeans.fit_predict(X_scaled)

# ============================
# [7] 클러스터별 통계 확인
# ============================

cluster_summary = pivot_table.groupby('cluster')[['CAGR', 'recent_visitors']].mean()
print(cluster_summary)

# ============================
# [8] 시각화
# ============================

plt.figure(figsize=(10,6))
sns.scatterplot(
    data=pivot_table,
    x='CAGR',
    y='recent_visitors',
    hue='cluster',
    palette='Set1',
    s=100
)
plt.title("Clusters based on CAGR and Recent Visitors")
plt.xlabel("CAGR (%)")
plt.ylabel("Recent Visitors")
plt.show()

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans


# pivot_table 생성
pivot = full_df.groupby(['D_NAT', 'year']).size().reset_index(name='visitors')
pivot_table = pivot.pivot(index='D_NAT', columns='year', values='visitors').fillna(0)

# CAGR 계산
years = sorted(pivot_table.columns.astype(int))
start_year = years[0]
end_year = years[-1]
n = end_year - start_year

pivot_table['CAGR'] = ((pivot_table[end_year] / pivot_table[start_year]) ** (1 / n) - 1) * 100
pivot_table['recent_visitors'] = pivot_table[end_year]

# 스케일링 & 클러스터링
X = pivot_table[['CAGR', 'recent_visitors']].copy()
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

kmeans = KMeans(n_clusters=3, random_state=42)
pivot_table['cluster'] = kmeans.fit_predict(X_scaled)

# 클러스터별 국가 리스트
cluster_country_lists = pivot_table.groupby('cluster').apply(lambda x: x.index.tolist()).to_dict()
print(cluster_country_lists)

id_to_name = {
    1: "중국",
    2: "일본",
    3: "대만",
    4: "미국",
    5: "홍콩",
    6: "태국",
    7: "베트남",
    8: "말레이시아",
    9: "필리핀",
    10: "싱가포르",
    11: "러시아",
    12: "중동",
    13: "인도네시아",
    14: "캐나다",
    15: "호주",
    16: "영국",
    17: "몽골",
    18: "독일",
    19: "프랑스",
    20: "인도",
    97: "기타"
}
cluster_country_names = {}

for cluster, id_list in cluster_country_lists.items():
    # 국가명으로 변환, 없으면 그대로 ID 반환
    name_list = [id_to_name.get(id, id) for id in id_list]
    cluster_country_names[cluster] = name_list

# 결과 출력
for cluster, names in cluster_country_names.items():
    print(f"Cluster {cluster}: {names}")

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# [데이터 전처리 단계 생략] pivot_table이 있다고 가정

# ✅ (1) 변수 선택
X = pivot_table[['recent_visitors']].copy()

# ✅ (2) 스케일링
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# ✅ (3) Elbow method로 최적 k 찾기
inertia = []
K_range = range(1, 10)
for k in K_range:
    km = KMeans(n_clusters=k, random_state=42)
    km.fit(X_scaled)
    inertia.append(km.inertia_)

plt.plot(K_range, inertia, marker='o')
plt.xlabel('k')
plt.ylabel('Inertia')
plt.title('Elbow Method for Market Size Clustering')
plt.show()

# ✅ (4) KMeans 클러스터링 (예시: k=3)
k_optimal = 3
kmeans = KMeans(n_clusters=k_optimal, random_state=42)
pivot_table['size_cluster'] = kmeans.fit_predict(X_scaled)

# ✅ (5) 클러스터별 시장 규모 확인
cluster_summary = pivot_table.groupby('size_cluster')['recent_visitors'].mean()
print(cluster_summary)

# ✅ (6) 클러스터별 국가 리스트 추출
cluster_country_lists_size = pivot_table.groupby('size_cluster').apply(lambda x: x.index.tolist()).to_dict()

# ✅ (7) 국가명 매핑 (기존 id_to_name 활용)
cluster_country_names_size = {}
for cluster, id_list in cluster_country_lists_size.items():
    name_list = [id_to_name.get(id, id) for id in id_list]
    cluster_country_names_size[cluster] = name_list

# ✅ (8) 결과 출력
for cluster, names in cluster_country_names_size.items():
    print(f"[시장 규모 Cluster {cluster}] {names}")

import pandas as pd

# 재방문 의향 점수가 1~2점인 응답자 필터링 (숫자형 기준)
low_revisit_df = df_2024[df_2024['Q13'].isin([1, 2])]

# 결과 확인 (선택)
print(low_revisit_df.shape)
print(low_revisit_df.head())

# 방한 목적 분포 확인
purpose_counts = low_revisit_df['Q1'].value_counts().sort_index()
print("방한 목적 분포:\n", purpose_counts)

"""1 → 여가/관광

2 → 친구, 친지 방문

3 → 사업 또는 전문 활동

4 → 교육

5 → 기타
"""

# 불편사항 관련 컬럼 목록
inconvenience_cols = ['Q12a01', 'Q12a02', 'Q12a03', 'Q12a04', 'Q12a05',
                      'Q12a06', 'Q12a07', 'Q12a08', 'Q12a09', 'Q12a10',
                      'Q12a11', 'Q12a12', 'Q12a13', 'Q12a14', 'Q12a15',
                      'Q12a16', 'Q12a17', 'Q12a18', 'Q12a19', 'Q12a20',
                      'Q12a21', 'Q12a22', 'Q12a23', 'Q12a24', 'Q12a25',
                      'Q12a26', 'Q12a27']

# 불편사항 응답 합계 계산 후 정렬
inconvenience_sum = low_revisit_df[inconvenience_cols].sum().sort_values(ascending=False)

print("\n불편사항 분포 (응답 수 높은 순):\n", inconvenience_sum)

inconvenience_mapping = {
    "Q12a01": "식도락",
    "Q12a02": "쇼핑",
    "Q12a03": "자연경관",
    "Q12a04": "유흥/오락",
    "Q12a05": "역사/문화유산",
    "Q12a06": "전통문화체험",
    "Q12a07": "현대문화체험 (K-pop 등)",
    "Q12a08": "카지노",
    "Q12a09": "스포츠 관람/참가",
    "Q12a10": "의료 서비스",
    "Q12a11": "뷰티 서비스",
    "Q12a12": "숙박시설",
    "Q12a13": "음식",
    "Q12a14": "교통 (대중교통 등)",
    "Q12a15": "물가 수준",
    "Q12a16": "치안/안전",
    "Q12a17": "관광정보 제공",
    "Q12a18": "안내 표지판",
    "Q12a19": "환대 및 친절",
    "Q12a20": "언어 소통",
    "Q12a21": "공공 Wi-Fi 접근성",
    "Q12a22": "화장실 이용 편의성",
    "Q12a23": "길찾기",
    "Q12a24": "관광안내서비스",
    "Q12a25": "스마트관광서비스",
    "Q12a26": "디지털 관광 정보",
    "Q12a27": "한국여행사/가이드"
}

# 인덱스 이름을 한글로 매핑
inconvenience_sum.index = inconvenience_sum.index.map(inconvenience_mapping)

# 시각화
plt.figure(figsize=(12, 6))
inconvenience_sum.plot(kind='bar')
plt.title("재방문 의향 낮은 관광객의 불편사항 응답 분포 (한글 문항명 기준)")
plt.ylabel("응답 수")
plt.xlabel("불편사항 항목")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# 1~2점이면 불만족으로 간주 → True / False → sum()으로 개수 카운트
low_score_counts = (low_revisit_df[inconvenience_cols] <= 2).sum()

# 한글 매핑 적용
low_score_counts.index = low_score_counts.index.map(inconvenience_mapping)

# 막대그래프 시각화
import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
low_score_counts.sort_values(ascending=False).plot(kind='bar')
plt.title("재방문 의향 낮은 관광객의 불편사항 항목별 '불만족'(1~2점) 응답 수")
plt.ylabel("불만족 응답자 수")
plt.xlabel("불편사항 항목")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

no_info_cols = ['Q4_2a1', 'Q4_2a2', 'Q4_2a3', 'Q4_2a_dk']

info_lack_counts = (low_revisit_df[no_info_cols] == 1).sum()

info_lack_labels = {
    'Q4_2a1': '1. 방문지정보',
    'Q4_2a2': '2. 교통정보',
    'Q4_2a3': '3. 음식 및 맛집 정보',
    'Q4_2a4': '4. 쇼핑 정보',
    'Q4_2a5': '5. 숙박 정보',
    'Q4_2a6': '6. 지역 축제 및 행사 정보',
    'Q4_2a7': '7. 한류 문화체험 정보',
    'Q4_2a8': '8. 금융 정보',
    'Q4_2a9': '9. 통신 이용 정보',
    'Q4_2a10': '10. 기타',
    'Q4_2a11': '11. 없다',
    'Q4_2a_dk': '12. 잘 모르겠다'
}

info_lack_counts.index = info_lack_counts.index.map(info_lack_labels)

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
info_lack_counts.sort_values(ascending=False).plot(kind='bar')
plt.title("재방문 의향 낮은 관광객의 부족했던 정보 항목")
plt.ylabel("응답자 수")
plt.xlabel("항목")
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# 1. 전체 컬럼명 출력해보고
print(low_revisit_df.columns.tolist())

import pandas as pd
import matplotlib.pyplot as plt

# 1. 길찾기(Q12a23) 불만족자 필터링
pathfinding_unhappy_df = low_revisit_df[low_revisit_df['Q12a23'] <= 2]

# 2. 문3-2. 고려한 관광 인프라 관련 컬럼
infra_cols = ['Q3_2a1', 'Q3_2a2', 'Q3_2a3', 'Q3_2a4', 'Q3_2a5',
              'Q3_2a6', 'Q3_2a7', 'Q3_2a8', 'Q3_2a9', 'Q3_2a10',
              'Q3_2a11', 'Q3_2a12']

# 3. 고려한 인프라 응답 수 합계
infra_counts = pathfinding_unhappy_df[infra_cols].sum().sort_values(ascending=False)

# 4. 한글 라벨 매핑
infra_labels = {
    'Q3_2a1': '출입국 절차',
    'Q3_2a2': '언어소통',
    'Q3_2a3': '치안',
    'Q3_2a4': '경제적인 여행 경비',
    'Q3_2a5': '숙박 시설',
    'Q3_2a6': '대중교통/교통',
    'Q3_2a7': '의료체계/질병관리',
    'Q3_2a8': '길찾기',
    'Q3_2a9': '관광 안내 서비스',
    'Q3_2a10': '모바일/인터넷 이용 편의',
    'Q3_2a11': '디지털 관광 정보',
    'Q3_2a12': '기타'
}

infra_counts.index = infra_counts.index.map(infra_labels)

# 5. 시각화
plt.figure(figsize=(12, 6))
infra_counts.plot(kind='bar')
plt.title("길찾기 불만족 응답자의 고려 관광 인프라 항목")
plt.ylabel("응답 수")
plt.xlabel("관광 인프라")
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

activity_cols = ['Q8a01','Q8a02','Q8a03','Q8a04','Q8a05',
                 'Q8a06','Q8a07','Q8a08','Q8a09','Q8a10',
                 'Q8a11','Q8a12','Q8a13','Q8a14','Q8a15',
                 'Q8a16','Q8a17','Q8a18','Q8a19','Q8a20']

activity_labels = [
    '식도락 관광', '쇼핑', '자연경관 감상', '휴양/휴식(웰니스)',
    '고궁/역사 유적지 방문', '전통문화체험', '박물관/전시관 관람',
    'K-POP/한류스타 관련', '연극/뮤지컬/발레 관람', '지역 축제 참여',
    '유흥/카지노', '오락(놀이공원/테마파크)', '뷰티/미용 관광',
    '치료/건강검진', '스포츠/레포츠 관람', '스포츠/레포츠 참가',
    '국제회의', '비즈니스 전문활동', '연수/교육/연구', '기타'
]

activity_counts = low_revisit_df[activity_cols].sum()
activity_counts.index = activity_labels
activity_counts_sorted = activity_counts.sort_values(ascending=False)

plt.figure(figsize=(10, 8))
activity_counts_sorted.plot(kind='barh')
plt.title('외래관광객 참여 활동 현황')
plt.xlabel('참여자 수')
plt.ylabel('활동')
plt.gca().invert_yaxis()  # 상위 활동이 위로 오도록
plt.tight_layout()
plt.show()

age_map = {
    1: '15-19세',
    2: '20대',
    3: '30대',
    4: '40대',
    5: '50대',
    6: '60대 이상'
}

low_revisit_df['D_AGE'] = low_revisit_df['D_AGE'].map(age_map)

import matplotlib.pyplot as plt

age_counts = low_revisit_df['D_AGE'].value_counts().sort_index()

plt.figure(figsize=(8,6))
age_counts.plot(kind='bar', color='salmon')
plt.title('재방문 의향 1~2점 응답자의 나이대 분포')
plt.xlabel('나이대')
plt.ylabel('응답자 수')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

purpose_map = {
    1: '여가/위락/휴식',
    2: '친구/친지 방문',
    3: '사업/전문 활동',
    4: '교육',
    5: '기타'
}

low_revisit_df['D_MOK'] = low_revisit_df['D_MOK'].map(purpose_map)

import matplotlib.pyplot as plt

purpose_counts = low_revisit_df['D_MOK'].value_counts()

plt.figure(figsize=(8,6))
purpose_counts.plot(kind='barh', color='lightseagreen')
plt.title('재방문 의향 1~2점 응답자의 방문 목적 분포')
plt.xlabel('응답자 수')
plt.ylabel('방문 목적')
plt.tight_layout()
plt.show()

nation_map = {
    1: '중국',
    2: '일본',
    3: '대만',
    4: '미국',
    5: '홍콩',
    6: '태국',
    7: '베트남',
    8: '말레이시아',
    9: '필리핀',
    10: '싱가포르',
    11: '러시아',
    12: '중동',
    13: '인도네시아',
    14: '캐나다',
    15: '호주',
    16: '영국',
    17: '몽골',
    18: '독일',
    19: '프랑스',
    20: '인도',
    97: '기타'
}

low_revisit_df['Nation'] = low_revisit_df['D_NAT'].map(nation_map)

import matplotlib.pyplot as plt

nation_counts = low_revisit_df['Nation'].value_counts()

plt.figure(figsize=(10,8))
nation_counts.plot(kind='barh', color='mediumpurple')
plt.title('재방문 의향 1~2점 응답자의 국가별 분포')
plt.xlabel('응답자 수')
plt.ylabel('국가')
plt.tight_layout()
plt.show()

sex_map = {
    1: '남성',
    2: '여성'
}

low_revisit_df['Sex'] = low_revisit_df['D_SEX'].map(sex_map)

import matplotlib.pyplot as plt

sex_counts = low_revisit_df['Sex'].value_counts()

plt.figure(figsize=(6,4))
sex_counts.plot(kind='bar', color=['steelblue','pink'])
plt.title('재방문 의향 1~2점 응답자의 성별 분포')
plt.xlabel('성별')
plt.ylabel('응답자 수')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

region_cols = ['Q9_2a01','Q9_2a02','Q9_2a03','Q9_2a04','Q9_2a05',
               'Q9_2a06','Q9_2a07','Q9_2a08','Q9_2a09','Q9_2a10',
               'Q9_2a11','Q9_2a12','Q9_2a13','Q9_2a14','Q9_2a15',
               'Q9_2a16','Q9_2a17']

region_labels = ['서울','경기','인천','강원','대전','충북','충남','세종',
                 '경북','경남','대구','울산','부산','광주','전북','전남','제주']

region_counts = low_revisit_df[region_cols].sum()
region_counts.index = region_labels
region_counts_sorted = region_counts.sort_values(ascending=True)

import matplotlib.pyplot as plt

plt.figure(figsize=(10,8))
region_counts_sorted.plot(kind='barh', color='mediumseagreen')
plt.title('재방문 의향 1~2점 응답자의 방문지역 분포')
plt.xlabel('응답자 수')
plt.ylabel('방문지역')
plt.tight_layout()
plt.show()

df_2024['Nation'] = df_2024['D_NAT'].map(nation_map)

import matplotlib.pyplot as plt

nation_counts = df_2024['Nation'].value_counts()

plt.figure(figsize=(10,8))
nation_counts.plot(kind='barh', color='mediumpurple')
plt.title('재방문 의향 1~2점 응답자의 국가별 분포')
plt.xlabel('응답자 수')
plt.ylabel('국가')
plt.tight_layout()
plt.show()

"""# 긍정적 유럽 여행객들"""

df_europe = df_2024[df_2024['Nation'].isin(['영국', '독일', '프랑스', '러시아'])]

# 방문 목적 맵핑
purpose_map = {
    1: '여가, 위락, 휴식',
    2: '친구, 친지 방문',
    3: '사업, 전문 활동',
    4: '교육',
    5: '기타'
}
df_europe['purpose_label'] = df_europe['Q1'].map(purpose_map)



# 결과 확인
print(df_europe[['purpose_label']].head())

# 재방문 의향 점수가 4~5점인 응답자 필터링 (숫자형 기준)
high_revisit_df_europe = df_europe[df_europe['Q13'].isin([4, 5])]

# 결과 확인 (선택)
print(high_revisit_df_europe.shape)
print(high_revisit_df_europe.head())

import numpy as np
nation_counts = high_revisit_df_europe['Nation'].value_counts()

# 색상 배열 생성
colors = plt.cm.tab20(np.linspace(0, 1, len(nation_counts)))


plt.figure(figsize=(10,8))
nation_counts.plot(kind='barh', color=colors)
plt.title('재방문 긍정적 응답자의 유럽 국가별 분포')
plt.xlabel('응답자 수')
plt.ylabel('국가')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# 방문 목적 분포 데이터
purpose_counts = high_revisit_df_europe['purpose_label'].value_counts()

# 색상 배열 생성
colors = plt.cm.tab20(np.linspace(0, 1, len(purpose_counts)))

# 시각화
plt.figure(figsize=(8,6))
plt.barh(purpose_counts.index, purpose_counts.values, color=colors)

plt.title('긍정적 유럽 국가 여행객 방문 목적 분포')
plt.xlabel('응답자 수')
plt.ylabel('방문 목적')
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
interest_map = {
    1: '새로운 국가',
    2: '과거 방문 경험',
    3: '행사 참여',
    4: '경비 적합',
    5: '거리/비행시간 적합',
    6: '항공 노선 다양',
    7: '문화콘텐츠',
    8: '전통문화',
    9: '관광지 정보',
    10: '가성비 상품',
    11: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q2_1a1', 'Q2_1a2', 'Q2_1a3']
interest_df = high_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_interest = pd.concat([interest_df[col] for col in cols])
interest_counts = all_interest.value_counts().sort_index()

# 4. 코드북 맵핑 적용
interest_counts.index = interest_counts.index.map(interest_map)

# 5. 시각화
plt.figure(figsize=(10,6))
plt.barh(interest_counts.index, interest_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('해당 국가 관심 계기 분포 (Q2_1a1 ~ Q2_1a3)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
activity_map = {
    1: '식도락',
    2: '쇼핑',
    3: '자연경관',
    4: '휴양/휴식',
    5: '고궁/역사유적',
    6: '전통문화체험',
    7: '박물관/전시관',
    8: 'K-POP/촬영지',
    9: '연극/뮤지컬/발레',
    10: '지역 축제',
    11: '유흥/카지노',
    12: '오락(테마파크)',
    13: '뷰티/미용',
    14: '치료/건강검진',
    15: '스포츠 관람',
    16: '스포츠 참가',
    17: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q3_1a1', 'Q3_1a2', 'Q3_1a3']
activity_df = high_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_activities = pd.concat([activity_df[col] for col in cols])
activity_counts = all_activities.value_counts().sort_index()

# 4. 코드북 맵핑 적용
activity_counts.index = activity_counts.index.map(activity_map)

# 5. 시각화
plt.figure(figsize=(10,8))
plt.barh(activity_counts.index, activity_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('고려한 관광활동 분포 (Q3_1a1 ~ Q3_1a3)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
infra_map = {
    1: '출입국 절차',
    2: '언어소통',
    3: '치안',
    4: '경제적 경비',
    5: '숙박 시설',
    6: '대중교통',
    7: '의료/질병관리',
    8: '길찾기',
    9: '관광 안내',
    10: '모바일/인터넷',
    11: '디지털 관광 정보',
    12: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q3_2a1', 'Q3_2a2', 'Q3_2a3']
infra_df = high_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_infra = pd.concat([infra_df[col] for col in cols])
infra_counts = all_infra.value_counts().sort_index()

# 4. 코드북 맵핑 적용
infra_counts.index = infra_counts.index.map(infra_map)

# 5. 시각화
plt.figure(figsize=(10,6))
plt.barh(infra_counts.index, infra_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('고려한 관광인프라 분포 (Q3_2a1 ~ Q3_2a3)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
site_map = {
    1: '글로벌 포털',
    2: '한국 포털',
    3: '본국 포털',
    4: '여행전문사이트/앱',
    5: '소셜미디어',
    6: '동영상 사이트',
    7: '여행 블로그',
    8: '여행사 홈페이지',
    9: '관광지 홈페이지',
    10: '항공사/호텔 홈페이지',
    11: '한국 공공기관 홈페이지',
    12: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q4_1a1', 'Q4_1a2', 'Q4_1a3']
site_df = high_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_sites = pd.concat([site_df[col] for col in cols])
site_counts = all_sites.value_counts().sort_index()

# 4. 코드북 맵핑 적용
site_counts.index = site_counts.index.map(site_map)

# 5. 시각화
plt.figure(figsize=(10,6))
plt.barh(site_counts.index, site_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('주로 이용한 사이트 분포 (Q4_1a1 ~ Q4_1a3)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

from pickle import HIGHEST_PROTOCOL
import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
info_map = {
    1 : '방문지정보',
    2 : '교통정보',
    3 : '음식/맛집',
    4 : '쇼핑정보',
    5 : '숙박정보',
    6 : '지역축제/행사',
    7 : '한류문화체험',
    8 : '금융정보',
    9 : '통신정보',
    10 : '기타',
    11 : '없다'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q4_2a1', 'Q4_2a2', 'Q4_2a3', 'Q4_2a_dk']
site_df = high_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_info = pd.concat([site_df[col] for col in cols])
info_counts = all_info.value_counts().sort_index()

# 4. 코드북 맵핑 적용
info_counts.index = info_counts.index.map(info_map)

# 5. 내림차순 정렬
info_counts = info_counts.sort_values(ascending=True)

# 6. 시각화
plt.figure(figsize=(10,8))
plt.barh(info_counts.index, info_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('부족했던 정보 분포 (Q4_2a1 ~ Q4_2a_dk)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
activity_map = {
    1: '식도락',
    2: '쇼핑',
    3: '자연경관',
    4: '휴양/휴식',
    5: '고궁/역사유적',
    6: '전통문화체험',
    7: '박물관/전시관',
    8: 'K-POP/촬영지',
    9: '연극/뮤지컬/발레',
    10: '지역축제',
    11: '유흥/카지노',
    12: '오락(테마파크)',
    13: '뷰티/미용',
    14: '치료/건강검진',
    15: '스포츠 관람',
    16: '스포츠 참가',
    17: '국제회의',
    18: '비즈니스 전문활동',
    19: '연수/교육/연구',
    20: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q8a01', 'Q8a02', 'Q8a03', 'Q8a04', 'Q8a05',
        'Q8a06', 'Q8a07', 'Q8a08', 'Q8a09', 'Q8a10',
        'Q8a11', 'Q8a12', 'Q8a13', 'Q8a14', 'Q8a15',
        'Q8a16', 'Q8a17', 'Q8a18', 'Q8a19', 'Q8a20']

activity_df = high_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_activity = pd.concat([activity_df[col] for col in cols])
activity_counts = all_activity.value_counts().sort_index()

# 4. 코드북 맵핑 적용
activity_counts.index = activity_counts.index.map(activity_map)

# 5. 내림차순 정렬
activity_counts = activity_counts.sort_values(ascending=True)

# 6. 시각화
plt.figure(figsize=(10,10))
plt.barh(activity_counts.index, activity_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('참여한 활동 분포 (Q8a01 ~ Q8a20)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
satisfaction_map = {
    1: '식도락',
    2: '쇼핑',
    3: '자연경관',
    4: '휴양/휴식',
    5: '고궁/역사유적',
    6: '전통문화체험',
    7: '박물관/전시관',
    8: 'K-POP/촬영지',
    9: '연극/뮤지컬/발레',
    10: '지역축제',
    11: '유흥/카지노',
    12: '오락(테마파크)',
    13: '뷰티/미용',
    14: '치료/건강검진',
    15: '스포츠 관람',
    16: '스포츠 참가',
    17: '국제회의',
    18: '비즈니스 전문활동',
    19: '연수/교육/연구',
    20: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q8_1a1', 'Q8_1a2', 'Q8_1a3']
satisfaction_df = high_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_satisfaction = pd.concat([satisfaction_df[col] for col in cols])
satisfaction_counts = all_satisfaction.value_counts().sort_index()

# 4. 코드북 맵핑 적용
satisfaction_counts.index = satisfaction_counts.index.map(satisfaction_map)

# 5. 내림차순 정렬
satisfaction_counts = satisfaction_counts.sort_values(ascending=True)

# 6. 시각화
plt.figure(figsize=(10,10))
plt.barh(satisfaction_counts.index, satisfaction_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('만족한 활동 분포 (Q8_1a1 ~ Q8_1a3)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
shopping_map = {
    1: '향수/화장품',
    2: '식료품',
    3: '의류',
    4: '신발류',
    5: '가방류',
    6: '보석/악세서리',
    7: '인삼/한약재',
    8: '주류',
    9: '담배',
    10: '전통 민예품',
    11: '한류스타 상품',
    12: '전자제품',
    13: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q10_2a01', 'Q10_2a02', 'Q10_2a03', 'Q10_2a04', 'Q10_2a05',
        'Q10_2a06', 'Q10_2a07', 'Q10_2a08', 'Q10_2a09', 'Q10_2a10',
        'Q10_2a11', 'Q10_2a12', 'Q10_2a13']

shopping_df = high_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_shopping = pd.concat([shopping_df[col] for col in cols])
shopping_counts = all_shopping.value_counts().sort_index()

# 4. 코드북 맵핑 적용
shopping_counts.index = shopping_counts.index.map(shopping_map)

# 5. 내림차순 정렬
shopping_counts = shopping_counts.sort_values(ascending=True)

# 6. 시각화
plt.figure(figsize=(10,8))
plt.barh(shopping_counts.index, shopping_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('쇼핑 항목 분포 (Q10_2a01 ~ Q10_2a13)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
region_map = {
    1: '서울',
    2: '경기',
    3: '인천',
    4: '강원',
    5: '대전',
    6: '충북',
    7: '충남',
    8: '세종',
    9: '경북',
    10: '경남',
    11: '대구',
    12: '울산',
    13: '부산',
    14: '광주',
    15: '전북',
    16: '전남',
    17: '제주'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q9_2a01', 'Q9_2a02', 'Q9_2a03', 'Q9_2a04', 'Q9_2a05',
        'Q9_2a06', 'Q9_2a07', 'Q9_2a08', 'Q9_2a09', 'Q9_2a10',
        'Q9_2a11', 'Q9_2a12', 'Q9_2a13', 'Q9_2a14', 'Q9_2a15',
        'Q9_2a16', 'Q9_2a17']

region_df = high_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_regions = pd.concat([region_df[col] for col in cols])
region_counts = all_regions.value_counts().sort_index()

# 4. 코드북 맵핑 적용
region_counts.index = region_counts.index.map(region_map)

# 5. 내림차순 정렬
region_counts = region_counts.sort_values(ascending=True)

# 6. 시각화
plt.figure(figsize=(10,10))
plt.barh(region_counts.index, region_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('방문 지역 분포 (Q9_2a01 ~ Q9_2a17)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
stay_map = {
    1: '1~3일',
    2: '4~7일',
    3: '8~10일',
    4: '11~30일',
    5: '31~60일',
    12: '61일 이상'
}

# 2. 데이터에서 해당 컬럼 선택
stay_df = high_revisit_df_europe['R일HAP']

# 3. 유효코드만 필터링
stay_df = stay_df[stay_df.isin(stay_map.keys())]

# 4. 값 카운트
stay_counts = stay_df.value_counts().sort_index()

# 5. 코드북 맵핑 적용
stay_counts.index = stay_counts.index.map(stay_map)

# 6. 체류기간 순으로 재정렬 (ordered_categories에 없는 값 제거 방지)
ordered_categories = ['1~3일', '4~7일', '8~10일', '11~30일', '31~60일', '61일 이상']
stay_counts = stay_counts.reindex(ordered_categories).fillna(0)

# 7. 시각화
plt.figure(figsize=(8,6))
plt.bar(stay_counts.index, stay_counts.values, color='mediumpurple', alpha=0.7)
plt.ylabel('응답 수')
plt.title('총 체재기간 분포 (R일HAP)')
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
accom_map = {
    1: '호텔',
    2: '모텔/여관',
    3: '콘도/리조트',
    4: '게스트하우스/호스텔',
    5: '민박/펜션',
    6: '기숙사/연수원',
    7: '친척/친구 집',
    8: '기타',
    9: '숙박 안함'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q9_5A1', 'Q9_5A2', 'Q9_5A3', 'Q9_5A4', 'Q9_5A5',
        'Q9_5A6', 'Q9_5A7', 'Q9_5A8', 'Q9_5A9']

accom_df = high_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_accom = pd.concat([accom_df[col] for col in cols])
accom_counts = all_accom.value_counts().sort_index()

# 4. 코드북 맵핑 적용
accom_counts.index = accom_counts.index.map(accom_map)

# 5. 내림차순 정렬
accom_counts = accom_counts.sort_values(ascending=True)

# 6. 시각화
plt.figure(figsize=(10,8))
plt.barh(accom_counts.index, accom_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('주요 이용 숙박시설 분포 (Q9_5A1 ~ Q9_5A9)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""# 부정적 유럽 여행객들"""

# 재방문 의향 점수가 1~2점인 응답자 필터링 (숫자형 기준)
low_revisit_df_europe = df_europe[df_europe['Q13'].isin([1, 2])]

# 결과 확인 (선택)
print(low_revisit_df_europe.shape)
print(low_revisit_df_europe.head())

import numpy as np
nation_counts = low_revisit_df_europe['Nation'].value_counts()

# 색상 배열 생성
colors = plt.cm.tab20(np.linspace(0, 1, len(nation_counts)))


plt.figure(figsize=(10,8))
nation_counts.plot(kind='barh', color=colors)
plt.title('재방문 부정적 응답자의 유럽 국가별 분포')
plt.xlabel('응답자 수')
plt.ylabel('국가')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# 방문 목적 분포 데이터
purpose_counts = low_revisit_df_europe['purpose_label'].value_counts()

# 색상 배열 생성
colors = plt.cm.tab20(np.linspace(0, 1, len(purpose_counts)))

# 시각화
plt.figure(figsize=(8,6))
plt.barh(purpose_counts.index, purpose_counts.values, color=colors)

plt.title('부정적 유럽 국가 여행객 방문 목적 분포')
plt.xlabel('응답자 수')
plt.ylabel('방문 목적')
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
interest_map = {
    1: '새로운 국가',
    2: '과거 방문 경험',
    3: '행사 참여',
    4: '경비 적합',
    5: '거리/비행시간 적합',
    6: '항공 노선 다양',
    7: '문화콘텐츠',
    8: '전통문화',
    9: '관광지 정보',
    10: '가성비 상품',
    11: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q2_1a1', 'Q2_1a2', 'Q2_1a3']
interest_df = low_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_interest = pd.concat([interest_df[col] for col in cols])
interest_counts = all_interest.value_counts().sort_index()

# 4. 코드북 맵핑 적용
interest_counts.index = interest_counts.index.map(interest_map)

# 5. 시각화
plt.figure(figsize=(10,6))
plt.barh(interest_counts.index, interest_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('해당 국가 관심 계기 분포 (Q2_1a1 ~ Q2_1a3)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
activity_map = {
    1: '식도락',
    2: '쇼핑',
    3: '자연경관',
    4: '휴양/휴식',
    5: '고궁/역사유적',
    6: '전통문화체험',
    7: '박물관/전시관',
    8: 'K-POP/촬영지',
    9: '연극/뮤지컬/발레',
    10: '지역 축제',
    11: '유흥/카지노',
    12: '오락(테마파크)',
    13: '뷰티/미용',
    14: '치료/건강검진',
    15: '스포츠 관람',
    16: '스포츠 참가',
    17: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q3_1a1', 'Q3_1a2', 'Q3_1a3']
activity_df = low_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_activities = pd.concat([activity_df[col] for col in cols])
activity_counts = all_activities.value_counts().sort_index()

# 4. 코드북 맵핑 적용
activity_counts.index = activity_counts.index.map(activity_map)

# 5. 시각화
plt.figure(figsize=(10,8))
plt.barh(activity_counts.index, activity_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('고려한 관광활동 분포 (Q3_1a1 ~ Q3_1a3)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
infra_map = {
    1: '출입국 절차',
    2: '언어소통',
    3: '치안',
    4: '경제적 경비',
    5: '숙박 시설',
    6: '대중교통',
    7: '의료/질병관리',
    8: '길찾기',
    9: '관광 안내',
    10: '모바일/인터넷',
    11: '디지털 관광 정보',
    12: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q3_2a1', 'Q3_2a2', 'Q3_2a3']
infra_df = low_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_infra = pd.concat([infra_df[col] for col in cols])
infra_counts = all_infra.value_counts().sort_index()

# 4. 코드북 맵핑 적용
infra_counts.index = infra_counts.index.map(infra_map)

# 5. 시각화
plt.figure(figsize=(10,6))
plt.barh(infra_counts.index, infra_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('고려한 관광인프라 분포 (Q3_2a1 ~ Q3_2a3)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
site_map = {
    1: '글로벌 포털',
    2: '한국 포털',
    3: '본국 포털',
    4: '여행전문사이트/앱',
    5: '소셜미디어',
    6: '동영상 사이트',
    7: '여행 블로그',
    8: '여행사 홈페이지',
    9: '관광지 홈페이지',
    10: '항공사/호텔 홈페이지',
    11: '한국 공공기관 홈페이지',
    12: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q4_1a1', 'Q4_1a2', 'Q4_1a3']
site_df = low_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_sites = pd.concat([site_df[col] for col in cols])
site_counts = all_sites.value_counts().sort_index()

# 4. 코드북 맵핑 적용
site_counts.index = site_counts.index.map(site_map)

# 5. 시각화
plt.figure(figsize=(10,6))
plt.barh(site_counts.index, site_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('주로 이용한 사이트 분포 (Q4_1a1 ~ Q4_1a3)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

from pickle import HIGHEST_PROTOCOL
import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
info_map = {
    1 : '방문지정보',
    2 : '교통정보',
    3 : '음식/맛집',
    4 : '쇼핑정보',
    5 : '숙박정보',
    6 : '지역축제/행사',
    7 : '한류문화체험',
    8 : '금융정보',
    9 : '통신정보',
    10 : '기타',
    11 : '없다'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q4_2a1', 'Q4_2a2', 'Q4_2a3', 'Q4_2a_dk']
site_df = low_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_info = pd.concat([site_df[col] for col in cols])
info_counts = all_info.value_counts().sort_index()

# 4. 코드북 맵핑 적용
info_counts.index = info_counts.index.map(info_map)

# 5. 내림차순 정렬
info_counts = info_counts.sort_values(ascending=True)

# 6. 시각화
plt.figure(figsize=(10,8))
plt.barh(info_counts.index, info_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('부족했던 정보 분포 (Q4_2a1 ~ Q4_2a_dk)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
activity_map = {
    1: '식도락',
    2: '쇼핑',
    3: '자연경관',
    4: '휴양/휴식',
    5: '고궁/역사유적',
    6: '전통문화체험',
    7: '박물관/전시관',
    8: 'K-POP/촬영지',
    9: '연극/뮤지컬/발레',
    10: '지역축제',
    11: '유흥/카지노',
    12: '오락(테마파크)',
    13: '뷰티/미용',
    14: '치료/건강검진',
    15: '스포츠 관람',
    16: '스포츠 참가',
    17: '국제회의',
    18: '비즈니스 전문활동',
    19: '연수/교육/연구',
    20: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q8a01', 'Q8a02', 'Q8a03', 'Q8a04', 'Q8a05',
        'Q8a06', 'Q8a07', 'Q8a08', 'Q8a09', 'Q8a10',
        'Q8a11', 'Q8a12', 'Q8a13', 'Q8a14', 'Q8a15',
        'Q8a16', 'Q8a17', 'Q8a18', 'Q8a19', 'Q8a20']

activity_df = low_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_activity = pd.concat([activity_df[col] for col in cols])
activity_counts = all_activity.value_counts().sort_index()

# 4. 코드북 맵핑 적용
activity_counts.index = activity_counts.index.map(activity_map)

# 5. 내림차순 정렬
activity_counts = activity_counts.sort_values(ascending=True)

# 6. 시각화
plt.figure(figsize=(10,10))
plt.barh(activity_counts.index, activity_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('참여한 활동 분포 (Q8a01 ~ Q8a20)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
satisfaction_map = {
    1: '식도락',
    2: '쇼핑',
    3: '자연경관',
    4: '휴양/휴식',
    5: '고궁/역사유적',
    6: '전통문화체험',
    7: '박물관/전시관',
    8: 'K-POP/촬영지',
    9: '연극/뮤지컬/발레',
    10: '지역축제',
    11: '유흥/카지노',
    12: '오락(테마파크)',
    13: '뷰티/미용',
    14: '치료/건강검진',
    15: '스포츠 관람',
    16: '스포츠 참가',
    17: '국제회의',
    18: '비즈니스 전문활동',
    19: '연수/교육/연구',
    20: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q8_1a1', 'Q8_1a2', 'Q8_1a3']
satisfaction_df = low_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_satisfaction = pd.concat([satisfaction_df[col] for col in cols])
satisfaction_counts = all_satisfaction.value_counts().sort_index()

# 4. 코드북 맵핑 적용
satisfaction_counts.index = satisfaction_counts.index.map(satisfaction_map)

# 5. 내림차순 정렬
satisfaction_counts = satisfaction_counts.sort_values(ascending=True)

# 6. 시각화
plt.figure(figsize=(10,10))
plt.barh(satisfaction_counts.index, satisfaction_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('만족한 활동 분포 (Q8_1a1 ~ Q8_1a3)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
shopping_map = {
    1: '향수/화장품',
    2: '식료품',
    3: '의류',
    4: '신발류',
    5: '가방류',
    6: '보석/악세서리',
    7: '인삼/한약재',
    8: '주류',
    9: '담배',
    10: '전통 민예품',
    11: '한류스타 상품',
    12: '전자제품',
    13: '기타'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q10_2a01', 'Q10_2a02', 'Q10_2a03', 'Q10_2a04', 'Q10_2a05',
        'Q10_2a06', 'Q10_2a07', 'Q10_2a08', 'Q10_2a09', 'Q10_2a10',
        'Q10_2a11', 'Q10_2a12', 'Q10_2a13']

shopping_df = low_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_shopping = pd.concat([shopping_df[col] for col in cols])
shopping_counts = all_shopping.value_counts().sort_index()

# 4. 코드북 맵핑 적용
shopping_counts.index = shopping_counts.index.map(shopping_map)

# 5. 내림차순 정렬
shopping_counts = shopping_counts.sort_values(ascending=True)

# 6. 시각화
plt.figure(figsize=(10,8))
plt.barh(shopping_counts.index, shopping_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('쇼핑 항목 분포 (Q10_2a01 ~ Q10_2a13)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
region_map = {
    1: '서울',
    2: '경기',
    3: '인천',
    4: '강원',
    5: '대전',
    6: '충북',
    7: '충남',
    8: '세종',
    9: '경북',
    10: '경남',
    11: '대구',
    12: '울산',
    13: '부산',
    14: '광주',
    15: '전북',
    16: '전남',
    17: '제주'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q9_2a01', 'Q9_2a02', 'Q9_2a03', 'Q9_2a04', 'Q9_2a05',
        'Q9_2a06', 'Q9_2a07', 'Q9_2a08', 'Q9_2a09', 'Q9_2a10',
        'Q9_2a11', 'Q9_2a12', 'Q9_2a13', 'Q9_2a14', 'Q9_2a15',
        'Q9_2a16', 'Q9_2a17']

region_df = low_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_regions = pd.concat([region_df[col] for col in cols])
region_counts = all_regions.value_counts().sort_index()

# 4. 코드북 맵핑 적용
region_counts.index = region_counts.index.map(region_map)

# 5. 내림차순 정렬
region_counts = region_counts.sort_values(ascending=True)

# 6. 시각화
plt.figure(figsize=(10,10))
plt.barh(region_counts.index, region_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('방문 지역 분포 (Q9_2a01 ~ Q9_2a17)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
stay_map = {
    1: '1~3일',
    2: '4~7일',
    3: '8~10일',
    4: '11~30일',
    5: '31~60일',
    12: '61일 이상'
}

# 2. 데이터에서 해당 컬럼 선택
stay_df = low_revisit_df_europe['R일HAP']

# 3. 유효코드만 필터링
stay_df = stay_df[stay_df.isin(stay_map.keys())]

# 4. 값 카운트
stay_counts = stay_df.value_counts().sort_index()

# 5. 코드북 맵핑 적용
stay_counts.index = stay_counts.index.map(stay_map)

# 6. 체류기간 순으로 재정렬 (ordered_categories에 없는 값 제거 방지)
ordered_categories = ['1~3일', '4~7일', '8~10일', '11~30일', '31~60일', '61일 이상']
stay_counts = stay_counts.reindex(ordered_categories).fillna(0)

# 7. 시각화
plt.figure(figsize=(8,6))
plt.bar(stay_counts.index, stay_counts.values, color='mediumpurple', alpha=0.7)
plt.ylabel('응답 수')
plt.title('총 체재기간 분포 (R일HAP)')
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

print(stay_counts)
print("전체 응답자 수:", len(stay_df))

import pandas as pd
import matplotlib.pyplot as plt

# 1. 코드북 맵핑
accom_map = {
    1: '호텔',
    2: '모텔/여관',
    3: '콘도/리조트',
    4: '게스트하우스/호스텔',
    5: '민박/펜션',
    6: '기숙사/연수원',
    7: '친척/친구 집',
    8: '기타',
    9: '숙박 안함'
}

# 2. 데이터에서 해당 컬럼만 선택
cols = ['Q9_5A1', 'Q9_5A2', 'Q9_5A3', 'Q9_5A4', 'Q9_5A5',
        'Q9_5A6', 'Q9_5A7', 'Q9_5A8', 'Q9_5A9']

accom_df = low_revisit_df_europe[cols]

# 3. 하나의 시리즈로 결합 후 값 카운트
all_accom = pd.concat([accom_df[col] for col in cols])
accom_counts = all_accom.value_counts().sort_index()

# 4. 코드북 맵핑 적용
accom_counts.index = accom_counts.index.map(accom_map)

# 5. 내림차순 정렬
accom_counts = accom_counts.sort_values(ascending=True)

# 6. 시각화
plt.figure(figsize=(10,8))
plt.barh(accom_counts.index, accom_counts.values, color='mediumpurple', alpha=0.7)
plt.xlabel('응답 수')
plt.title('주요 이용 숙박시설 분포 (Q9_5A1 ~ Q9_5A9)')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()