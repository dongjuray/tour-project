# -*- coding: utf-8 -*-
"""외래관광 2차.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qd4JYkNMZBch_qjHZBesBbQRHv7gxVOr
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install koreanize-matplotlib
# import koreanize_matplotlib
# import matplotlib.pyplot as plt
# import pandas as pd

import pandas as pd

# 클러스터링된 데이터 불러오기
df_cluster1_2024 = pd.read_csv("/content/cluster1.csv", index_col=0)

# 원본 데이터
#df_2024 = pd.read_excel("/content/2024 외래관광객조사_Data.xlsx")
#df_2023 = pd.read_excel("/content/2023 외래관광객조사 DATA.xlsx")

# 1. 기준 국가 코드 추출 (중복 제거)
nat_codes_2024 = df_cluster1_2024['D_NAT'].unique()

# 2. df_2023에서 해당 국가 코드만 필터링
df_cluster1_2023 = df_2023[df_2023['D_NAT'].isin(nat_codes_2024)].copy()

nat_codebook = {
    1.0: "중국", 2.0: "일본", 3.0: "대만", 4.0: "미국", 5.0: "홍콩",
    6.0: "태국", 7.0: "베트남", 8.0: "말레이시아", 9.0: "필리핀", 10.0: "싱가포르",
    11.0: "러시아", 12.0: "중동", 13.0: "인도네시아", 14.0: "캐나다", 15.0: "호주",
    16.0: "영국", 17.0: "몽골", 18.0: "독일", 19.0: "프랑스", 20.0: "인도",
    97.0: "기타"
}

# 국가명을 추가하고 싶을 경우
df_cluster1_2023['국가명'] = df_cluster1_2023['D_NAT'].map(nat_codebook)

df_cluster1_2024['재방문자'].value_counts(normalize=True)

df_cluster1_2024['Q13'].value_counts().sort_index()

df_cluster1_2024['총액1인TOT2'].describe()

rating_map = {
    '① 매우 불만족': 1,
    '② 불만족': 2,
    '③ 보통': 3,
    '④ 만족': 4,
    '⑤ 매우 만족': 5
}

# 1. 만족도 항목
satisfaction_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 27)]

# 2. rating_map 적용 후 숫자형으로 변환
df_satisfaction_numeric = df_cluster1_2024[satisfaction_cols].replace(rating_map).apply(pd.to_numeric, errors='coerce')

# 3. 평균 계산
satisfaction_means = df_satisfaction_numeric.mean()

# Q12a 코드별 설명 매핑 딕셔너리
q12a_labels = {
    "Q12a01": "식도락",
    "Q12a02": "쇼핑",
    "Q12a03": "자연경관",
    "Q12a04": "휴양/웰니스",
    "Q12a05": "고궁/역사",
    "Q12a06": "전통문화체험",
    "Q12a07": "박물관/전시관",
    "Q12a08": "K-POP/드라마",
    "Q12a09": "공연 관람",
    "Q12a10": "지역 축제",
    "Q12a11": "유흥",
    "Q12a12": "오락/테마파크",
    "Q12a13": "뷰티/미용",
    "Q12a14": "치료/건강검진",
    "Q12a15": "스포츠 관람",
    "Q12a16": "스포츠 참가",
    "Q12a17": "국제회의",
    "Q12a18": "비즈니스 활동",
    "Q12a19": "연수/교육",
    "Q12a20": "기타 활동",
    "Q12a21": "공연관람",
    "Q12a22": "쇼핑환경",
    "Q12a23": "길찾기",
    "Q12a24": "관광안내서비스",
    "Q12a25": "스마트관광서비스",
    "Q12a26": "디지털 관광정보",
    "Q12a27": "한국여행사/가이드"
}


#  사람이 보기 좋은 라벨로 인덱스 이름 바꾸기
satisfaction_means_labeled = satisfaction_means.rename(index=q12a_labels)


# 매핑된 평균값 시리즈 반환
satisfaction_means_labeled

import matplotlib.pyplot as plt

# 시각화를 위한 평균 데이터 다시 정의
rating_map = {
    '① 매우 불만족': 1,
    '② 불만족': 2,
    '③ 보통': 3,
    '④ 만족': 4,
    '⑤ 매우 만족': 5
}

# 텍스트 → 숫자 변환
df_satisfaction_mapped = df_cluster1_2024[satisfaction_cols].replace(rating_map)
satisfaction_means_converted = df_satisfaction_mapped.apply(pd.to_numeric, errors='coerce').mean().sort_values()

# 1. 만족도 점수 숫자화
satisfaction_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 27)]
df_satisfaction_numeric = df_cluster1_2024[satisfaction_cols].replace(rating_map).apply(pd.to_numeric, errors='coerce')

# 2. 평균 계산
satisfaction_means = df_satisfaction_numeric.mean()

# 3. 한글 라벨로 인덱스 변경
satisfaction_means_labeled = satisfaction_means.rename(index=q12a_labels)

# 4. 정렬 후 시각화
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
satisfaction_means_labeled.sort_values().plot(kind='barh', color='skyblue')
plt.xlabel('평균 만족도 (1~5)')
plt.ylabel('만족도 항목')
plt.title('2024 외래관광객 만족도 평균 (낮은 순)')
plt.tight_layout()
plt.show()

# 매핑된 한글 라벨 기준으로 수평 막대그래프 시각화
plt.figure(figsize=(8, 10))
satisfaction_means_labeled.plot(kind='barh', color='skyblue')
plt.title('2024 외래관광객 만족도 평균 (낮은 순)', fontsize=14)
plt.xlabel('평균 만족도 (1~5)', fontsize=12)
plt.ylabel('만족도 항목', fontsize=12)
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# 1. 변수 리스트 및 라벨 정의
q12_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 27)]

q12_labels = {
    'Q12a01': '식도락(음식)', 'Q12a02': '쇼핑', 'Q12a03': '자연경관 감상',
    'Q12a04': '고궁/역사 유적지 방문', 'Q12a05': '전통문화체험', 'Q12a06': '박물관/전시관 관람',
    'Q12a07': 'K-POP/드라마 촬영지', 'Q12a08': '공연 관람(뮤지컬 등)', 'Q12a09': '지역 축제 참여',
    'Q12a10': '유흥(카지노 등)', 'Q12a11': '오락(놀이공원 등)', 'Q12a12': '뷰티/미용 관광',
    'Q12a13': '치료/건강검진', 'Q12a14': '스포츠 관람', 'Q12a15': '스포츠 참가',
    'Q12a16': '출입국 절차', 'Q12a17': '언어소통', 'Q12a18': '치안',
    'Q12a19': '여행 경비', 'Q12a20': '숙박 시설', 'Q12a21': '대중교통',
    'Q12a22': '길 찾기', 'Q12a23': '관광안내서비스', 'Q12a24': '모바일/인터넷 편의',
    'Q12a25': '디지털 관광 정보', 'Q12a26': '한국여행사/가이드'
}

# 국가 코드 → 국가명 매핑
nation_map = {
    1: '중국', 2: '일본', 3: '대만', 4: '미국', 5: '홍콩',
    6: '태국', 7: '베트남', 8: '말레이시아', 9: '필리핀', 10: '싱가포르',
    11: '러시아', 12: '중동', 13: '인도네시아', 14: '캐나다', 15: '호주',
    16: '영국', 17: '몽골', 18: '독일', 19: '프랑스', 20: '인도',
    97: '기타'
}

# 2. 필요한 컬럼만 추출 및 매핑
df_q12 = df_2024[['D_NAT', 'weight'] + q12_cols].copy()
df_q12['nation'] = df_q12['D_NAT'].map(nation_map)
df_q12 = df_q12.drop(columns='D_NAT')
df_q12 = df_q12.rename(columns=q12_labels)

# 3. 국가별 가중 평균 함수 정의
def weighted_mean(group):
    w = group['weight']
    return (group.drop(columns=['nation', 'weight']).multiply(w, axis=0)).sum() / w.sum()

# 4. 국가별 가중 평균 계산
mean_by_nation = df_q12.groupby('nation').apply(weighted_mean)

# 5. 히트맵 시각화
plt.figure(figsize=(14, 10))
sns.heatmap(mean_by_nation.T, annot=True, cmap='Greens', vmin=3.5, vmax=5, fmt=".1f")
plt.title('국가별 세부 만족도 히트맵 (Q12 항목)', fontsize=16)
plt.xlabel('국가')
plt.ylabel('만족도 항목')
plt.tight_layout()
plt.show()

# 1. 변수 설정
q12_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 27)]

q12_labels = {
    'Q12a01': '식도락(음식)', 'Q12a02': '쇼핑', 'Q12a03': '자연경관 감상',
    'Q12a04': '고궁/역사 유적지 방문', 'Q12a05': '전통문화체험', 'Q12a06': '박물관/전시관 관람',
    'Q12a07': 'K-POP/드라마 촬영지', 'Q12a08': '공연 관람(뮤지컬 등)', 'Q12a09': '지역 축제 참여',
    'Q12a10': '유흥(카지노 등)', 'Q12a11': '오락(놀이공원 등)', 'Q12a12': '뷰티/미용 관광',
    'Q12a13': '치료/건강검진', 'Q12a14': '스포츠 관람', 'Q12a15': '스포츠 참가',
    'Q12a16': '출입국 절차', 'Q12a17': '언어소통', 'Q12a18': '치안',
    'Q12a19': '여행 경비', 'Q12a20': '숙박 시설', 'Q12a21': '대중교통',
    'Q12a22': '길 찾기', 'Q12a23': '관광안내서비스', 'Q12a24': '모바일/인터넷 편의',
    'Q12a25': '디지털 관광 정보', 'Q12a26': '한국여행사/가이드'
}

# 2. 컬럼 추출 및 라벨링
df_revisit = df_2024[['Q13', 'weight'] + q12_cols].copy()
df_revisit = df_revisit.rename(columns=q12_labels)

# 3. 재방문 의향 범주 라벨링
q13_map = {
    1: '전혀 그렇지 않다',
    2: '별로 그렇지 않다',
    3: '보통',
    4: '대체로 그렇다',
    5: '매우 그렇다'
}
df_revisit['revisit_intent'] = df_revisit['Q13'].map(q13_map)

# 4. 그룹별 가중 평균 계산
def weighted_mean(group):
    w = group['weight']
    return (group.drop(columns=['Q13', 'weight', 'revisit_intent']).multiply(w, axis=0)).sum() / w.sum()

mean_by_revisit = df_revisit.groupby('revisit_intent').apply(weighted_mean)

plt.figure(figsize=(14, 6))
sns.heatmap(mean_by_revisit.T, annot=True, cmap='YlGnBu', vmin=3.5, vmax=5, fmt=".1f")
plt.title('재방문 의향 그룹별 만족도 비교 (Q12 항목)', fontsize=16)
plt.xlabel('재방문 의향')
plt.ylabel('만족도 항목')
plt.tight_layout()
plt.show()

# 1. 사용할 컬럼 정의
q4_cols = ['Q4_2a1', 'Q4_2a2', 'Q4_2a3']
q12_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 27)]

# Q12 라벨
q12_labels = {
    'Q12a01': '식도락(음식)', 'Q12a02': '쇼핑', 'Q12a03': '자연경관 감상',
    'Q12a04': '고궁/역사 유적지 방문', 'Q12a05': '전통문화체험', 'Q12a06': '박물관/전시관 관람',
    'Q12a07': 'K-POP/드라마 촬영지', 'Q12a08': '공연 관람(뮤지컬 등)', 'Q12a09': '지역 축제 참여',
    'Q12a10': '유흥(카지노 등)', 'Q12a11': '오락(놀이공원 등)', 'Q12a12': '뷰티/미용 관광',
    'Q12a13': '치료/건강검진', 'Q12a14': '스포츠 관람', 'Q12a15': '스포츠 참가',
    'Q12a16': '출입국 절차', 'Q12a17': '언어소통', 'Q12a18': '치안',
    'Q12a19': '여행 경비', 'Q12a20': '숙박 시설', 'Q12a21': '대중교통',
    'Q12a22': '길 찾기', 'Q12a23': '관광안내서비스', 'Q12a24': '모바일/인터넷 편의',
    'Q12a25': '디지털 관광 정보', 'Q12a26': '한국여행사/가이드'
}

# 2. 데이터 준비
df_info = df_2024[q4_cols + q12_cols + ['weight']].copy()
df_info = df_info.rename(columns=q12_labels)

# 3. 항목별 만족도 차이 계산
diff_results = {}

for col in q4_cols:
    group1 = df_info[df_info[col] == 1]
    group0 = df_info[df_info[col] != 1]

    def wavg(df):
        return (df.drop(columns=q4_cols + ['weight']).multiply(df['weight'], axis=0)).sum() / df['weight'].sum()

    mean1 = wavg(group1)
    mean0 = wavg(group0)
    diff = mean1 - mean0
    diff_results[col] = diff

# 4. 결과 정리
df_diff = pd.DataFrame(diff_results).T
df_diff.index = ['방문지정보 부족', '교통정보 부족', '음식정보 부족']
df_diff.index.name = '정보 부족 항목'

plt.figure(figsize=(14, 5))
sns.heatmap(df_diff, cmap='coolwarm', center=0, annot=True, fmt=".2f")
plt.title('정보 부족 여부에 따른 만족도 차이 (가중 평균)', fontsize=16)
plt.xlabel('만족도 항목')
plt.ylabel('정보 부족 항목')
plt.tight_layout()
plt.show()

# 1. 변수 설정
info_cols = ['Q4_2a1', 'Q4_2a2', 'Q4_2a3']
nation_col = 'D_NAT'
weight_col = 'weight'

info_labels = {
    'Q4_2a1': '방문지정보 부족',
    'Q4_2a2': '교통정보 부족',
    'Q4_2a3': '음식정보 부족',
}

nation_map = {
    1: '중국', 2: '일본', 3: '대만', 4: '미국', 5: '홍콩',
    6: '태국', 7: '베트남', 8: '말레이시아', 9: '필리핀', 10: '싱가포르',
    11: '러시아', 12: '중동', 13: '인도네시아', 14: '캐나다', 15: '호주',
    16: '영국', 17: '몽골', 18: '독일', 19: '프랑스', 20: '인도',
    97: '기타'
}

# 2. 필요한 컬럼 추출
df_info = df_2024[[nation_col, weight_col] + info_cols].copy()
df_info['nation'] = df_info[nation_col].map(nation_map)

# 3. 항목별 국가별 응답률 계산 (가중치 기반)
results = {}

for col in info_cols:
    df_info['selected'] = (df_info[col] == 1).astype(int)
    grouped = df_info.groupby('nation').apply(
        lambda g: (g['selected'] * g[weight_col]).sum() / g[weight_col].sum()
    )
    results[info_labels[col]] = grouped * 100  # 퍼센트로 변환

# 4. 결과 정리
df_result = pd.DataFrame(results)
df_result = df_result.round(1)

plt.figure(figsize=(12, 8))
sns.heatmap(df_result.T, annot=True, cmap='OrRd', fmt='.1f', cbar_kws={'label': '정보 부족 응답률 (%)'})
plt.title('국가별 정보 부족 경험 비교', fontsize=16)
plt.xlabel('국가')
plt.ylabel('정보 부족 항목')
plt.tight_layout()
plt.show()

"""# 클러스터링 데이터"""

likert_map = {
    '① 매우 불만족': 1,
    '② 불만족': 2,
    '③ 보통': 3,
    '④ 만족': 4,
    '⑤ 매우 만족': 5,
    '모름/ 무응답': None,  # 결측값 처리
    '모름': None,
    '무응답': None
}

# 만족도 항목 리스트
satisfaction_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 27)]

# 매핑 적용
for col in satisfaction_cols:
    df_cluster1_2024[col] = df_cluster1_2024[col].map(likert_map)

df_cluster1_2024['weight'] = pd.to_numeric(df_cluster1_2024['weight'], errors='coerce')

# 1. 클러스터 데이터와 Q12 항목 병합
df_q12_numerical = df_2024[['pnid', 'D_NAT', 'weight'] + q12_cols].copy()
merged_df_numerical = pd.merge(df_cluster1_2024[['pnid', 'cluster']], df_q12_numerical, on='pnid', how='left')


# 2. 국가별 가중 평균 계산
def weighted_mean(group):
    w = group['weight']
    return group[q12_cols].multiply(w, axis=0).sum() / w.sum()

mean_by_nation_final = merged_df_numerical.groupby('D_NAT').apply(weighted_mean)
mean_by_nation_final = mean_by_nation_final.rename(columns=q12_labels)

# 국가 코드 → 국가명 매핑 사전
nation_map = {
    1: '중국', 2: '일본', 3: '대만', 4: '미국', 5: '홍콩',
    6: '태국', 7: '베트남', 8: '말레이시아', 9: '필리핀', 10: '싱가포르',
    11: '러시아', 12: '중동', 13: '인도네시아', 14: '캐나다', 15: '호주',
    16: '영국', 17: '몽골', 18: '독일', 19: '프랑스', 20: '인도',
    97: '기타'
}

# 국가 코드 index를 국가명으로 매핑
mean_by_nation_final.index = mean_by_nation_final.index.map(nation_map)

# 3. 히트맵 시각화
plt.figure(figsize=(16, 10))
sns.heatmap(mean_by_nation_final.T, annot=True, cmap='YlGnBu', vmin=3.5, vmax=5, fmt=".1f")
plt.title('국가별 세부 만족도 히트맵 (Q12 항목)', fontsize=16)
plt.xlabel('국가')
plt.ylabel('만족도 항목')
plt.tight_layout()
plt.show()

# 최종 데이터 확인
mean_by_nation_final.head(10)

# 1. Q12 컬럼 목록 정의
q12_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 27)]

# 2. 라벨 매핑 딕셔너리
q12_labels = {
    'Q12a01': '식도락',
    'Q12a02': '쇼핑',
    'Q12a03': '숙박',
    'Q12a04': '교통',
    'Q12a05': '관광지',
    'Q12a06': '체험 활동',
    'Q12a07': '언어 소통',
    'Q12a08': '가격 대비 만족도',
    'Q12a09': '환대',
    'Q12a10': '날씨',
    'Q12a11': '안전',
    'Q12a12': '청결',
    'Q12a13': '화장실',
    'Q12a14': '인터넷 환경',
    'Q12a15': '공공 교통',
    'Q12a16': '편의성',
    'Q12a17': '관광 안내소',
    'Q12a18': '이동 편의성',
    'Q12a19': '정보 접근성',
    'Q12a20': '표지판 및 안내',
    'Q12a21': '문화 체험',
    'Q12a22': '숙박 비용',
    'Q12a23': '길찾기',
    'Q12a24': '관광 안내 서비스',
    'Q12a25': '스마트 관광 서비스',
    'Q12a26': '디지털 관광 정보'
}

# 3. 가중 평균 계산
satisfaction_means = merged_df_numerical[q12_cols].apply(
    lambda col: (col * merged_df_numerical['weight']).sum() / merged_df_numerical['weight'].sum()
)

# 4. 라벨 적용
satisfaction_means_labeled = satisfaction_means.rename(index=q12_labels)

# 국가별 전체 평균 계산
nation_means = mean_by_nation_final.mean(axis=1)

# 평균이 가장 낮은 국가
lowest_nation = nation_means.idxmin()
lowest_nation_score = nation_means.min()

print(f"📉 평균이 가장 낮은 국가는 '{lowest_nation}'이며, 평균 만족도는 {lowest_nation_score:.2f}점입니다.")

# 항목별 전체 평균 계산
satisfaction_means = mean_by_nation_final.mean(axis=0)

# 평균이 가장 낮은 항목
lowest_item = satisfaction_means.idxmin()
lowest_item_score = satisfaction_means.min()

print(f"📉 평균이 가장 낮은 만족도 항목은 '{lowest_item}'이며, 평균은 {lowest_item_score:.2f}점입니다.")

# 만족도 항목 리스트
satisfaction_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 27)]

# 컬럼명 정리 (선택)
df_cluster1_2024 = df_cluster1_2024.rename(columns={'Q13': 'revisit_intention'})

# 그룹화
grouped = df_cluster1_2024.groupby(['cluster', 'revisit_intention'])

# 가중 평균 계산
def weighted_mean(x):
    return (x[satisfaction_cols].multiply(x['weight'], axis=0)).sum() / x['weight'].sum()

# 적용
weighted_satisfaction = grouped.apply(weighted_mean).reset_index()

import seaborn as sns
import matplotlib.pyplot as plt

# 보기 좋게 reshape
heatmap_df = weighted_satisfaction.set_index(['cluster', 'revisit_intention'])

# 항목명 한글로 바꾸고 싶으면 매핑
label_map = {
    'Q12a01': '식도락', 'Q12a02': '쇼핑', 'Q12a03': '자연경관', 'Q12a04': '휴양/휴식',
    'Q12a05': '역사유적', 'Q12a06': '전통문화체험', 'Q12a07': '박물관 전시관', 'Q12a08': 'K-POP/한류공연',
    'Q12a09': '연극·뮤지컬', 'Q12a10': '테마파크', 'Q12a11': '겨울스포츠', 'Q12a12': '골프',
    'Q12a13': '의료관광', 'Q12a14': '산업시찰', 'Q12a15': '교육연수', 'Q12a16': '전통시장',
    'Q12a17': '대형마트', 'Q12a18': '면세점', 'Q12a19': '백화점', 'Q12a20': '기타 쇼핑',
    'Q12a21': '대중교통', 'Q12a22': '택시', 'Q12a23': '길찾기', 'Q12a24': '관광안내서비스',
    'Q12a25': '스마트관광서비스', 'Q12a26': '디지털 관광정보'
}
heatmap_df.rename(columns=label_map, inplace=True)

# 히트맵 시각화
plt.figure(figsize=(16, 8))
sns.heatmap(
    heatmap_df,
    annot=True,       # 숫자 표시 ON
    fmt=".2f",        # 소수점 둘째자리
    cmap='YlGnBu',
    vmin=1, vmax=5
)
plt.title('클러스터 + 재방문 의사별 만족도 (가중평균)', fontsize=14)
plt.xlabel('만족도 항목')
plt.ylabel('클러스터 / 재방문 의사')
plt.tight_layout()
plt.show()

# 1번 클러스터에서 재방문 의향 가장 낮은 그룹 vs 가장 높은 그룹 비교
row_low = heatmap_df.loc[(1, '① 전혀 그렇지 않다')]
row_high = heatmap_df.loc[(1, '⑤ 매우 그렇다')]

# 항목별 차이 계산
diff = (row_high - row_low).abs().sort_values(ascending=False)

# 차이가 가장 큰 상위 항목 5개 출력
print(diff.head())

# 1. Q12a02는 이미 숫자로 되어 있음 (1~5)
# 2. 만족도 점수와 국적별 가중 비율 계산
nationality_by_score = (
    df_cluster1_2024
    .dropna(subset=['Q12a02', 'D_NAT'])
    .groupby(['Q12a02', 'D_NAT'])['weight']
    .sum()
    .groupby(level=0)
    .apply(lambda x: x / x.sum())  # 점수별 그룹 내 정규화
    .unstack(fill_value=0)
)

# 3. 평균 기준 상위 국적 추출 (top 10)
top_nationalities = nationality_by_score.mean().sort_values(ascending=False).head(10).index

# 4. 시각화
nationality_by_score[top_nationalities].T.plot(kind='bar', figsize=(14, 6))
plt.title("쇼핑 만족도 점수별 국적 분포 (가중치 반영)", fontsize=14)
plt.xlabel("국적")
plt.ylabel("비율")
plt.legend(title="쇼핑 만족도 점수", title_fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Q12a02 (쇼핑 만족도) 숫자형 변환
df_cluster1_2024['Q12a02'] = pd.to_numeric(df_cluster1_2024['Q12a02'], errors='coerce')

# 국적별 가중 평균 계산
shopping_mean_by_nation = (
    df_cluster1_2024
    .groupby('D_NAT')
    .apply(lambda x: (x['Q12a02'] * x['weight']).sum() / x['weight'].sum())
    .sort_values(ascending=False)
)

# 상위 10개 시각화
shopping_mean_by_nation.head(10).plot(kind='barh', figsize=(8, 5), title='쇼핑 만족도 상위 국적 (가중평균)')
plt.xlabel('쇼핑 만족도')
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# 1. 쇼핑 장소 관련 컬럼
shopping_cols = ['Q10_3a1', 'Q10_3a2', 'Q10_3a3']

# 2. 쇼핑 장소 한글명 → 코드 매핑 (역방향)
shopping_place_rev_map = {
    '공항 면세점': 1,
    '시내 면세점': 2,
    '로드샵': 3,
    '전통시장': 4,
    '백화점': 5,
    '대형 쇼핑몰': 6,
    '대형마트': 7,
    '기타': 8
}

# 3. 코드 → 한글명 (시각화용)
shopping_place_map = {v: k for k, v in shopping_place_rev_map.items()}

# 4. rating_map 정의
rating_map = {
    '매우 불만족': 1,
    '불만족': 2,
    '보통': 3,
    '만족': 4,
    '매우 만족': 5
}

# 5. 쇼핑 장소를 코드로 변환
for col in shopping_cols:
    df_cluster1_2024[col + '_code'] = df_cluster1_2024[col].map(shopping_place_rev_map)

# 6. 숫자 코드 리스트로 병합
code_cols = [col + '_code' for col in shopping_cols]
df_cluster1_2024['shopping_places'] = df_cluster1_2024[code_cols].values.tolist()

# 7. 코드 정리 함수
def clean_shopping_codes(code_list):
    return [int(x) for x in code_list if pd.notnull(x) and 1 <= int(x) <= 8]

df_cluster1_2024['shopping_places_clean'] = df_cluster1_2024['shopping_places'].apply(clean_shopping_codes)

# 8. 유효한 행만 필터링
df_valid = df_cluster1_2024.dropna(subset=['Q12a02', 'weight', 'shopping_places_clean'])

# 9. explode로 리스트 풀기
df_exploded = df_valid.explode('shopping_places_clean')

# 10. 만족도 점수 숫자화
df_exploded['Q12a02_numeric'] = df_exploded['Q12a02'].replace(rating_map)

# 11. 그룹별 가중치 합계
group_sum = (
    df_exploded
    .groupby(['Q12a02_numeric', 'shopping_places_clean'])['weight']
    .sum()
    .reset_index()
)

# 12. 만족도 그룹 내 비율 계산
group_sum['ratio'] = group_sum.groupby('Q12a02_numeric')['weight'].transform(lambda x: x / x.sum())

# 13. 피벗
place_by_score = group_sum.pivot(index='Q12a02_numeric', columns='shopping_places_clean', values='ratio').fillna(0)

# 14. 컬럼명 (코드 → 한글 쇼핑 장소명)
place_by_score.columns = place_by_score.columns.map(lambda x: shopping_place_map.get(x, f"장소{x}"))

# 15. 숫자형으로 강제 변환
place_by_score = place_by_score.astype(float)

# 16. 시각화
place_by_score.T.plot(kind='bar', figsize=(14, 6))
plt.title("쇼핑 만족도 점수별 쇼핑 장소 분포 (가중치 반영)", fontsize=14)
plt.xlabel("쇼핑 장소")
plt.ylabel("비율")
plt.legend(title="쇼핑 만족도 점수", title_fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd

# 1. 쇼핑 장소 관련 컬럼
shopping_cols = ['Q10_3a1', 'Q10_3a2', 'Q10_3a3']

# 2. 쇼핑 장소명 → 코드 매핑
shopping_place_rev_map = {
    '공항 면세점': 1,
    '시내 면세점': 2,
    '로드샵': 3,
    '전통시장': 4,
    '백화점': 5,
    '대형 쇼핑몰': 6,
    '대형마트': 7,
    '기타': 8
}
shopping_place_map = {v: k for k, v in shopping_place_rev_map.items()}

# 3. 만족도 텍스트 → 숫자 매핑 (①~⑤ 포함)
rating_map_fixed = {
    '① 매우 불만족': 1,
    '② 불만족': 2,
    '③ 보통': 3,
    '④ 만족': 4,
    '⑤ 매우 만족': 5
}

# 4. 쇼핑 장소를 코드로 변환
for col in shopping_cols:
    df_cluster1_2024[col + '_code'] = df_cluster1_2024[col].map(shopping_place_rev_map)

# 5. 코드 리스트로 병합
code_cols = [col + '_code' for col in shopping_cols]
df_cluster1_2024['shopping_places'] = df_cluster1_2024[code_cols].values.tolist()

# 6. 코드 리스트 정리 함수
def clean_shopping_codes(code_list):
    return [int(x) for x in code_list if pd.notnull(x) and 1 <= int(x) <= 8]

df_cluster1_2024['shopping_places_clean'] = df_cluster1_2024['shopping_places'].apply(clean_shopping_codes)

# 7. 쇼핑 만족도 숫자화
df_cluster1_2024['Q12a02_numeric'] = df_cluster1_2024['Q12a02'].replace(rating_map_fixed)
df_cluster1_2024['Q12a02_numeric'] = pd.to_numeric(df_cluster1_2024['Q12a02_numeric'], errors='coerce')
df_cluster1_2024['weight'] = pd.to_numeric(df_cluster1_2024['weight'], errors='coerce')

# 8. 유효한 행만 필터링
df_valid = df_cluster1_2024.dropna(subset=['Q12a02_numeric', 'weight', 'shopping_places_clean'])

# 9. explode로 리스트 풀기
df_exploded = df_valid.explode('shopping_places_clean')

# 🔐 NaN 제거 후 int로 변환
df_exploded = df_exploded.dropna(subset=['shopping_places_clean'])
df_exploded['place_code'] = df_exploded['shopping_places_clean'].astype(int)


# 10. 쇼핑 장소별 가중 평균 만족도 계산
mean_by_place = (
    df_exploded
    .groupby('place_code')
    .apply(lambda g: (g['Q12a02_numeric'] * g['weight']).sum() / g['weight'].sum())
    .reset_index(name='weighted_mean')
    .sort_values(by='weighted_mean', ascending=False)
)

# 11. 장소명 붙이기
mean_by_place['place_name'] = mean_by_place['place_code'].map(shopping_place_map)

# 12. 결과 출력
print(mean_by_place[['place_name', 'weighted_mean']])

shopping_item_cols = [f'Q10_2a{str(i).zfill(2)}' for i in range(1, 14)]

for col in shopping_item_cols:
    unique_vals = df_cluster1_2024[col].unique()
    print(f"{col} 고유값: {unique_vals}")

# 쇼핑 항목 컬럼 및 매핑
shopping_item_cols = [f'Q10_2a{str(i).zfill(2)}' for i in range(1, 14)]
shopping_item_map = {
    'Q10_2a01': '향수/화장품',
    'Q10_2a02': '식료품(김치 등)',
    'Q10_2a03': '의류',
    'Q10_2a04': '신발류',
    'Q10_2a05': '가방류',
    'Q10_2a06': '보석/악세서리',
    'Q10_2a07': '인삼/한약재',
    'Q10_2a08': '주류',
    'Q10_2a09': '담배',
    'Q10_2a10': '전통 민예품',
    'Q10_2a11': '한류 굿즈',
    'Q10_2a12': '전자제품',
    'Q10_2a13': '기타'
}

# Q12a02를 숫자형으로 변환
rating_map_fixed = {
    '① 매우 불만족': 1,
    '② 불만족': 2,
    '③ 보통': 3,
    '④ 만족': 4,
    '⑤ 매우 만족': 5
}
df_cluster1_2024['Q12a02_numeric'] = df_cluster1_2024['Q12a02'].replace(rating_map_fixed)
df_cluster1_2024['Q12a02_numeric'] = pd.to_numeric(df_cluster1_2024['Q12a02_numeric'], errors='coerce')
df_cluster1_2024['weight'] = pd.to_numeric(df_cluster1_2024['weight'], errors='coerce')

# 가중 평균 계산
item_results = []
for col in shopping_item_cols:
    df_item = df_cluster1_2024[df_cluster1_2024[col].notna()]
    if not df_item.empty:
        weighted_mean = (df_item['Q12a02_numeric'] * df_item['weight']).sum() / df_item['weight'].sum()
        item_results.append({'item_code': col, 'item_name': shopping_item_map[col], 'weighted_mean': weighted_mean})

df_item_mean = pd.DataFrame(item_results).sort_values(by='weighted_mean', ascending=False)

import matplotlib.pyplot as plt

# 정렬된 데이터 기준
plot_df = df_item_mean.sort_values(by='weighted_mean', ascending=True)

# 시각화
plt.figure(figsize=(10, 6))
bars = plt.barh(plot_df['item_name'], plot_df['weighted_mean'], color='pink', edgecolor='black')

# 축 & 제목 설정
plt.xlabel('가중 평균 만족도 (1~5)', fontsize=12, color='black')
plt.ylabel('쇼핑 항목', fontsize=12, color='black')
plt.title('쇼핑 항목별 평균 쇼핑 만족도 (가중치 반영)', fontsize=14, color='black')
plt.xlim(1, 5)
plt.grid(axis='x', linestyle='--', alpha=0.4)
plt.xticks(color='black')
plt.yticks(color='black')
plt.tight_layout()
plt.show()

mq_cols = [f'MQ10_2b{str(i).zfill(2)}' for i in range(1, 14)]

for col in mq_cols:
    unique_vals = df_cluster1_2024[col].unique()
    print(f"{col} 고유값:", unique_vals[:10], '...')  # 너무 많을 경우 상위 10개만 출력

import matplotlib.pyplot as plt

# 쇼핑 항목별 구매 비중 컬럼
mq_cols = [f'MQ10_2b{str(i).zfill(2)}' for i in range(1, 14)]
mq_map = {
    'MQ10_2b01': '향수/화장품', 'MQ10_2b02': '식료품', 'MQ10_2b03': '의류',
    'MQ10_2b04': '신발류', 'MQ10_2b05': '가방류', 'MQ10_2b06': '보석/악세서리',
    'MQ10_2b07': '인삼/한약재', 'MQ10_2b08': '주류', 'MQ10_2b09': '담배',
    'MQ10_2b10': '전통 민예품', 'MQ10_2b11': '한류 굿즈', 'MQ10_2b12': '전자제품', 'MQ10_2b13': '기타'
}

# 평균 계산 및 정리
mq_means = df_cluster1_2024[mq_cols].mean().rename(index=mq_map).sort_values(ascending=False)

# 시각화
plt.figure(figsize=(10, 6))
plt.barh(mq_means.index, mq_means.values, color='pink', edgecolor='black')
plt.xlabel('평균 구매 비중 (%)', fontsize=12)
plt.title('전체 쇼핑 항목별 평균 구매 비중', fontsize=14)
plt.gca().invert_yaxis()
plt.grid(axis='x', linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()

# 클러스터별 평균 계산
cluster_mq_mean = df_cluster1_2024.groupby('cluster')[mq_cols].mean()
cluster_mq_mean.columns = [mq_map[col] for col in mq_cols]

# 각 클러스터별 Top 3 항목 추출
for cluster_id, row in cluster_mq_mean.iterrows():
    top_items = row.sort_values(ascending=False).head(3)
    print(f"[클러스터 {cluster_id}] 상위 쇼핑 품목:")
    for item, pct in top_items.items():
        print(f"  - {item}: {pct:.1f}%")
    print()

# 만족도 상위 그룹: Q12a02_numeric ≥ 4
high_sat = df_cluster1_2024[df_cluster1_2024['Q12a02_numeric'] >= 4]

# 항목별 평균 비중
mq_highsat_mean = high_sat[mq_cols].mean().rename(index=mq_map).sort_values(ascending=False)

# 시각화
plt.figure(figsize=(10, 6))
plt.barh(mq_highsat_mean.index, mq_highsat_mean.values, color='black', edgecolor='pink')
plt.xlabel('평균 구매 비중 (%)', fontsize=12)
plt.title('만족도 상위 그룹의 쇼핑 항목별 구매 비중', fontsize=14)
plt.gca().invert_yaxis()
plt.grid(axis='x', linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()

# 쇼핑 항목 비중과 Q12a02_numeric 간 피어슨 상관계수
mq_corr = df_cluster1_2024[mq_cols + ['Q12a02_numeric']].corr()['Q12a02_numeric'].drop('Q12a02_numeric')
mq_corr = mq_corr.rename(index=mq_map).sort_values(ascending=False)

# 시각화
plt.figure(figsize=(10, 6))
plt.barh(mq_corr.index, mq_corr.values, color='pink', edgecolor='black')
plt.xlabel('피어슨 상관계수 (r)', fontsize=12)
plt.title('쇼핑 항목 구매 비중과 만족도 간 상관관계', fontsize=14)
plt.gca().invert_yaxis()
plt.grid(axis='x', linestyle='--', alpha=0.4)
plt.tight_layout()
plt.show()

# C쇼핑비1인대체 유니크 값 확인
df_cluster1_2024['C쇼핑비1인대체'].unique()

# 1. 그대로 분포 계산
distribution_by_item = {}
for i, col in enumerate(item_cols, start=1):
    item_name = item_names[i]
    subset = df_cluster1_2024[df_cluster1_2024[col].notna() & df_cluster1_2024['C쇼핑비1인대체'].notna()]
    counts = subset['C쇼핑비1인대체'].value_counts().sort_index()
    ratio = (counts / counts.sum()) * 100
    distribution_by_item[item_name] = ratio

# 2. 데이터프레임 변환
df_dist = pd.DataFrame(distribution_by_item).fillna(0)

# 3. 순서 지정 (현재 존재하는 항목 기준)
spend_label_order = ['0$', '0$ 초과 ~ 30$ 이하', '30$ 초과 ~ 100$ 이하', '100$ 초과']
df_dist = df_dist.loc[df_dist.index.intersection(spend_label_order)]
df_dist = df_dist.reindex(spend_label_order)

# 4. 시각화
import matplotlib.pyplot as plt
colors = ['#4E79A7', '#F28E2B', '#E15759', '#76B7B2']

plt.figure(figsize=(16, 8))
df_dist.T.plot(
    kind='bar',
    stacked=True,
    color=colors
)

plt.title("쇼핑 항목별 쇼핑비 구간 분포", fontsize=16)
plt.xlabel("쇼핑 항목", fontsize=12)
plt.ylabel("비율 (%)", fontsize=12)
plt.legend(
    title="쇼핑비 구간",
    labels=spend_label_order,
    bbox_to_anchor=(1.05, 1), loc='upper left'
)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print(df_cluster1_2024['C쇼핑비1인대체'].value_counts(dropna=False))

import pandas as pd
import matplotlib.pyplot as plt

# 1. 지출 범주 (문자열) → 추정 금액 매핑
spend_mapping_str = {
    "1000$ 이하": 500,
    "1000$ 초과 - 2000$ 이하": 1500,
    "2000$ 초과 - 3000$ 이하": 2500,
    "3000$ 초과 - 5000$ 이하": 4000,
    "5000$ 초과 - 10000$ 이하": 7500,
    "10000$ 초과": 12000,
    "최대금액초과자": 15000
}

# 2. 지역 코드 → 지역명 매핑
region_codes = {
    "Q9_2a01": "서울", "Q9_2a02": "경기", "Q9_2a03": "인천",
    "Q9_2a04": "강원", "Q9_2a05": "대전", "Q9_2a06": "충북", "Q9_2a07": "충남",
    "Q9_2a08": "세종", "Q9_2a09": "경북", "Q9_2a10": "경남", "Q9_2a11": "대구",
    "Q9_2a12": "울산", "Q9_2a13": "부산", "Q9_2a14": "광주",
    "Q9_2a15": "전북", "Q9_2a16": "전남", "Q9_2a17": "제주"
}

# 3. 지출금액(추정) 변수 생성
df_cluster1_2024["지출금액(추정)"] = df_cluster1_2024["C총액1인TOT2"].map(spend_mapping_str)

# 4. 지역별 평균 지출 계산
region_stats = []

for col, region in region_codes.items():
    visited = df_cluster1_2024[df_cluster1_2024[col] == region]
    avg_spend = visited["지출금액(추정)"].mean()
    region_stats.append((region, avg_spend, len(visited)))

# 5. 데이터프레임 생성 및 정렬
region_spend_df = pd.DataFrame(region_stats, columns=["지역", "평균지출(추정)", "방문자수"])
region_spend_df = region_spend_df.sort_values(by="평균지출(추정)", ascending=False)

# 6. 시각화
plt.figure(figsize=(10,6))
plt.barh(region_spend_df["지역"], region_spend_df["평균지출(추정)"], color="pink")
plt.xlabel("평균 지출 금액 ($)")
plt.title("클러스터1: 방문 지역별 1인 평균 지출 (추정)")
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()

# 1~27 항목: 문12. 항목별 만족도
satisfaction_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 28)]

# 매핑: 항목 이름
satisfaction_labels = {
    'Q12a01': '식도락', 'Q12a02': '쇼핑', 'Q12a03': '자연경관', 'Q12a04': '휴양/웰니스',
    'Q12a05': '역사유적', 'Q12a06': '전통문화체험', 'Q12a07': '박물관·전시관',
    'Q12a08': 'K-POP/촬영지', 'Q12a09': '공연·연극', 'Q12a10': '놀이공원·테마파크',
    'Q12a11': '스포츠관람', 'Q12a12': '레저스포츠체험', 'Q12a13': '의료관광',
    'Q12a14': '온천/찜질방', 'Q12a15': '카지노', 'Q12a16': '한식문화체험',
    'Q12a17': '한복체험', 'Q12a18': '뷰티체험', 'Q12a19': '요리체험',
    'Q12a20': '전통예술공연', 'Q12a21': '전통시장', 'Q12a22': '지역특산품구입',
    'Q12a23': '길찾기/교통편의', 'Q12a24': '관광안내서비스', 'Q12a25': '스마트관광서비스',
    'Q12a26': '디지털 관광정보', 'Q12a27': '여행사/가이드'
}

# 지역 컬럼
region_cols = [f'Q9_2a{str(i).zfill(2)}' for i in range(1, 18)]
region_labels = {
    'Q9_2a01': '서울', 'Q9_2a02': '경기', 'Q9_2a03': '인천', 'Q9_2a04': '강원',
    'Q9_2a05': '대전', 'Q9_2a06': '충북', 'Q9_2a07': '충남', 'Q9_2a08': '세종',
    'Q9_2a09': '경북', 'Q9_2a10': '경남', 'Q9_2a11': '대구', 'Q9_2a12': '울산',
    'Q9_2a13': '부산', 'Q9_2a14': '광주', 'Q9_2a15': '전북', 'Q9_2a16': '전남', 'Q9_2a17': '제주'
}
# Q12a27 문자열 → 숫자형으로 매핑
q27_map = {
    '① 매우 불만족': 1,
    '② 불만족': 2,
    '③ 보통': 3,
    '④ 만족': 4,
    '⑤ 매우 만족': 5
}

df['Q12a27'] = df['Q12a27'].map(q27_map)

import numpy as np

# 필요한 컬럼만 추출
cols_needed = ['pnid', 'weight'] + satisfaction_cols + region_cols
df = df_cluster1_2024[cols_needed].copy()

# 지역 방문 여부 melt
df_melted = df.melt(
    id_vars=['pnid', 'weight'] + satisfaction_cols,
    value_vars=region_cols,
    var_name='region_code',
    value_name='visited'
)

# 방문한 지역만 필터링
df_melted = df_melted[df_melted['visited'] == 1].copy()
df_melted['region_name'] = df_melted['region_code'].map(region_labels)
df_melted['Q12a27'] = df_melted['Q12a27'].map(q27_map)


# Q12a24~Q12a26에서 9 = 해당 없음 → 결측 처리
for col in ['Q12a24', 'Q12a25', 'Q12a26']:
    df_melted.loc[df_melted[col] == 9, col] = np.nan

def weighted_mean(group):
    w = group['weight']
    valid = group[satisfaction_cols].notna()
    weighted_scores = group[satisfaction_cols].multiply(w, axis=0)
    return weighted_scores.sum() / (w * valid).sum()

region_satisfaction = df_melted.groupby('region_name').apply(weighted_mean)
region_satisfaction.rename(columns=satisfaction_labels, inplace=True)

top_activity_per_region = region_satisfaction.idxmax(axis=1)
top_score_per_region = region_satisfaction.max(axis=1)

plot_df = pd.DataFrame({
    'region': top_activity_per_region.index,
    'top_satisfaction_item': top_activity_per_region.values,
    'mean_score': top_score_per_region.values
}).sort_values(by='mean_score', ascending=False)

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(11, 8))
sns.barplot(
    data=plot_df,
    x='mean_score',
    y='region',
    hue='top_satisfaction_item',
    dodge=False,
    palette=['black', 'deeppink', 'hotpink', 'pink']
)
plt.title('클러스터1: 지역별 최고 만족 항목 (Q12a01~27 기준)', fontsize=14)
plt.xlabel('평균 만족도 (1~5점)')
plt.ylabel('방문 지역')
plt.legend(title='최고 만족 항목', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

# 모든 만족도 항목에 대해 유니크 값 확인
for col in satisfaction_cols:
    print(f"{col} ({satisfaction_labels.get(col, col)}):", sorted(df_cluster1_2024[col].dropna().unique()))

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 문12. 만족도 항목 변수 및 라벨
satisfaction_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 28)]
satisfaction_labels = {
    'Q12a01': '식도락', 'Q12a02': '쇼핑', 'Q12a03': '자연경관', 'Q12a04': '휴양/웰니스',
    'Q12a05': '역사유적', 'Q12a06': '전통문화체험', 'Q12a07': '박물관·전시관',
    'Q12a08': 'K-POP/촬영지', 'Q12a09': '공연·연극', 'Q12a10': '놀이공원·테마파크',
    'Q12a11': '스포츠관람', 'Q12a12': '레저스포츠체험', 'Q12a13': '의료관광',
    'Q12a14': '온천/찜질방', 'Q12a15': '카지노', 'Q12a16': '한식문화체험',
    'Q12a17': '한복체험', 'Q12a18': '뷰티체험', 'Q12a19': '요리체험',
    'Q12a20': '전통예술공연', 'Q12a21': '전통시장', 'Q12a22': '지역특산품구입',
    'Q12a23': '길찾기/교통편의', 'Q12a24': '관광안내서비스', 'Q12a25': '스마트관광서비스',
    'Q12a26': '디지털관광정보', 'Q12a27': '여행사/가이드'
}

region_cols = [f'Q9_2a{str(i).zfill(2)}' for i in range(1, 18)]
region_labels = {
    'Q9_2a01': '서울', 'Q9_2a02': '경기', 'Q9_2a03': '인천', 'Q9_2a04': '강원',
    'Q9_2a05': '대전', 'Q9_2a06': '충북', 'Q9_2a07': '충남', 'Q9_2a08': '세종',
    'Q9_2a09': '경북', 'Q9_2a10': '경남', 'Q9_2a11': '대구', 'Q9_2a12': '울산',
    'Q9_2a13': '부산', 'Q9_2a14': '광주', 'Q9_2a15': '전북', 'Q9_2a16': '전남', 'Q9_2a17': '제주'
}

# 문자열로 되어 있던 지역 응답 → 방문 여부로 1/NaN 처리
for col in region_cols:
    df_cluster1_2024[col] = df_cluster1_2024[col].apply(lambda x: 1 if pd.notna(x) else np.nan)

# Q12a27 문자형 → 숫자형 변환
q27_map = {
    '① 매우 불만족': 1,
    '② 불만족': 2,
    '③ 보통': 3,
    '④ 만족': 4,
    '⑤ 매우 만족': 5
}
df_cluster1_2024['Q12a27'] = df_cluster1_2024['Q12a27'].map(q27_map)

# Q12a24~Q12a26: 9 = 해당 없음 → NaN 처리
for col in ['Q12a24', 'Q12a25', 'Q12a26']:
    df_cluster1_2024[col] = pd.to_numeric(df_cluster1_2024[col], errors='coerce')
    df_cluster1_2024.loc[df_cluster1_2024[col] == 9, col] = np.nan

# melt
cols_needed = ['pnid', 'weight'] + satisfaction_cols + region_cols
df = df_cluster1_2024[cols_needed].copy()

df_melted = df.melt(
    id_vars=['pnid', 'weight'] + satisfaction_cols,
    value_vars=region_cols,
    var_name='region_code',
    value_name='visited'
)

# 방문자만
df_melted = df_melted[df_melted['visited'] == 1].copy()
df_melted['region_name'] = df_melted['region_code'].map(region_labels)

# 1. 가중 평균 함수
def weighted_mean(group):
    w = group['weight']
    valid = group[satisfaction_cols].notna()
    weighted_scores = group[satisfaction_cols].multiply(w, axis=0)
    result = weighted_scores.sum() / (w * valid).sum()
    return pd.Series(result)

# 2. 적용
region_satisfaction = df_melted.groupby('region_name').apply(weighted_mean)
region_satisfaction.index.name = None
region_satisfaction.rename(columns=satisfaction_labels, inplace=True)

# [0] 라이브러리 로딩
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 만족도 항목
satisfaction_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 28)]
satisfaction_labels = {
    'Q12a01': '식도락', 'Q12a02': '쇼핑', 'Q12a03': '자연경관', 'Q12a04': '휴양/웰니스',
    'Q12a05': '역사유적', 'Q12a06': '전통문화체험', 'Q12a07': '박물관·전시관',
    'Q12a08': 'K-POP/촬영지', 'Q12a09': '공연·연극', 'Q12a10': '놀이공원·테마파크',
    'Q12a11': '스포츠관람', 'Q12a12': '레저스포츠체험', 'Q12a13': '의료관광',
    'Q12a14': '온천/찜질방', 'Q12a15': '카지노', 'Q12a16': '한식문화체험',
    'Q12a17': '한복체험', 'Q12a18': '뷰티체험', 'Q12a19': '요리체험',
    'Q12a20': '전통예술공연', 'Q12a21': '전통시장', 'Q12a22': '지역특산품구입',
    'Q12a23': '길찾기/교통편의', 'Q12a24': '관광안내서비스', 'Q12a25': '스마트관광서비스',
    'Q12a26': '디지털관광정보', 'Q12a27': '여행사/가이드'
}

# 지역 방문 항목
region_cols = [f'Q9_2a{str(i).zfill(2)}' for i in range(1, 18)]
region_labels = {
    'Q9_2a01': '서울', 'Q9_2a02': '경기', 'Q9_2a03': '인천', 'Q9_2a04': '강원',
    'Q9_2a05': '대전', 'Q9_2a06': '충북', 'Q9_2a07': '충남', 'Q9_2a08': '세종',
    'Q9_2a09': '경북', 'Q9_2a10': '경남', 'Q9_2a11': '대구', 'Q9_2a12': '울산',
    'Q9_2a13': '부산', 'Q9_2a14': '광주', 'Q9_2a15': '전북', 'Q9_2a16': '전남', 'Q9_2a17': '제주'
}

cols_needed = ['pnid'] + satisfaction_cols + region_cols
df = df_cluster1_2024[cols_needed].copy()

# melt
df_melted = df.melt(
    id_vars=['pnid'] + satisfaction_cols,
    value_vars=region_cols,
    var_name='region_code',
    value_name='visited'
)

# 방문자만 남기고 지역 이름 매핑
df_melted = df_melted[df_melted['visited'] == 1].copy()
df_melted['region_name'] = df_melted['region_code'].map(region_labels)

# 지역별 평균 만족도 (weight 없이)
region_satisfaction = df_melted.groupby('region_name')[satisfaction_cols].mean()
region_satisfaction.rename(columns=satisfaction_labels, inplace=True)

top_activity_per_region = region_satisfaction.idxmax(axis=1)
top_score_per_region = region_satisfaction.max(axis=1)

plot_df = pd.DataFrame({
    'region': top_activity_per_region.index,
    'top_satisfaction_item': top_activity_per_region.values,
    'mean_score': top_score_per_region.values
}).sort_values(by='mean_score', ascending=False)

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))
sns.barplot(
    data=plot_df,
    x='region',          # 지역을 x축
    y='mean_score',      # 평균 만족도를 y축
    hue='top_satisfaction_item',
    dodge=False,
    palette='Set2'       # 선명한 색상 팔레트
)

plt.title('클러스터1: 지역별 최고 만족 활동', fontsize=14)
plt.ylabel('평균 만족도 (1~5점)', fontsize=12)
plt.xlabel('방문 지역', fontsize=12)
plt.ylim(0, 5.5)
plt.xticks(rotation=45, fontsize=10)
plt.yticks(fontsize=10)
plt.legend(title='최고 만족 항목', bbox_to_anchor=(1.01, 1), loc='upper left')
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# [1] 만족도 문항과 라벨 정의
satisfaction_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 28)]
satisfaction_labels = {
    'Q12a01': '식도락', 'Q12a02': '쇼핑', 'Q12a03': '자연경관', 'Q12a04': '휴양/웰니스',
    'Q12a05': '역사유적', 'Q12a06': '전통문화체험', 'Q12a07': '박물관·전시관', 'Q12a08': 'K-POP/촬영지',
    'Q12a09': '공연·연극', 'Q12a10': '놀이공원·테마파크', 'Q12a11': '스포츠관람', 'Q12a12': '레저스포츠체험',
    'Q12a13': '의료관광', 'Q12a14': '온천/찜질방', 'Q12a15': '카지노', 'Q12a16': '한식문화체험',
    'Q12a17': '한복체험', 'Q12a18': '뷰티체험', 'Q12a19': '요리체험', 'Q12a20': '전통예술공연',
    'Q12a21': '전통시장', 'Q12a22': '지역특산품구입', 'Q12a23': '길찾기/교통편의',
    'Q12a24': '관광안내서비스', 'Q12a25': '스마트관광서비스', 'Q12a26': '디지털관광정보', 'Q12a27': '여행사/가이드'
}

# [2] 지역 컬럼 정의
region_cols = [col for col in df_cluster1_2024.columns if col.startswith('Q9_2a')]
region_labels = {
    'Q9_2a01': '서울', 'Q9_2a02': '경기', 'Q9_2a03': '인천', 'Q9_2a04': '강원',
    'Q9_2a05': '대전', 'Q9_2a06': '충북', 'Q9_2a07': '충남', 'Q9_2a08': '세종',
    'Q9_2a09': '경북', 'Q9_2a10': '경남', 'Q9_2a11': '대구', 'Q9_2a12': '울산',
    'Q9_2a13': '부산', 'Q9_2a14': '광주', 'Q9_2a15': '전북', 'Q9_2a16': '전남', 'Q9_2a17': '제주'
}

# [3] melt + 지역 통합 + 필터링
df_melted = df_cluster1_2024.melt(
    id_vars=region_cols,
    value_vars=satisfaction_cols,
    var_name='activity_code',
    value_name='score'
)
df_melted['activity'] = df_melted['activity_code'].map(satisfaction_labels)

df_melted['region_name'] = None
for col in region_cols:
    df_melted.loc[df_melted[col].notna(), 'region_name'] = region_labels[col]
df_melted = df_melted.drop(columns=region_cols)
df_melted = df_melted[df_melted['score'].between(1, 5)]  # 유효 응답만

# [4] 지역별 Top5 활동 추출
activity_counts = df_melted.groupby(['region_name', 'activity']).size().reset_index(name='count')
top5 = (
    activity_counts
    .sort_values(['region_name', 'count'], ascending=[True, False])
    .groupby('region_name')
    .head(5)
)

# [5] 평균 만족도 결합
mean_scores = df_melted.groupby(['region_name', 'activity'])['score'].mean().reset_index(name='mean_score')
top5_with_scores = pd.merge(top5, mean_scores, on=['region_name', 'activity'])

# [6] 시각화
plt.figure(figsize=(14, 8))
sns.barplot(
    data=top5_with_scores,
    x='region_name',
    y='mean_score',
    hue='activity',
    palette='Set1'
)

plt.title('지역별 주요 활동 Top5의 평균 만족도', fontsize=16)
plt.xlabel('방문 지역', fontsize=12)
plt.ylabel('평균 만족도 (1~5점)', fontsize=12)
plt.ylim(0, 5.5)
plt.xticks(rotation=45, fontsize=10)
plt.yticks(fontsize=10)
plt.legend(title='활동 항목', bbox_to_anchor=(1.02, 1), loc='upper left')
plt.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# [1] 활동 항목 정의
satisfaction_cols = [f'Q12a{str(i).zfill(2)}' for i in range(1, 28)]
satisfaction_labels = {
    'Q12a01': '식도락', 'Q12a02': '쇼핑', 'Q12a03': '자연경관', 'Q12a04': '휴양/웰니스',
    'Q12a05': '역사유적', 'Q12a06': '전통문화체험', 'Q12a07': '박물관·전시관', 'Q12a08': 'K-POP/촬영지',
    'Q12a09': '공연·연극', 'Q12a10': '놀이공원·테마파크', 'Q12a11': '스포츠관람', 'Q12a12': '레저스포츠체험',
    'Q12a13': '의료관광', 'Q12a14': '온천/찜질방', 'Q12a15': '카지노', 'Q12a16': '한식문화체험',
    'Q12a17': '한복체험', 'Q12a18': '뷰티체험', 'Q12a19': '요리체험', 'Q12a20': '전통예술공연',
    'Q12a21': '전통시장', 'Q12a22': '지역특산품구입', 'Q12a23': '길찾기/교통편의',
    'Q12a24': '관광안내서비스', 'Q12a25': '스마트관광서비스', 'Q12a26': '디지털관광정보', 'Q12a27': '여행사/가이드'
}

# [2] 지역 정보 정의
region_cols = [col for col in df_cluster1_2024.columns if col.startswith('Q9_2a')]
region_labels = {
    'Q9_2a01': '서울', 'Q9_2a02': '경기', 'Q9_2a03': '인천', 'Q9_2a04': '강원',
    'Q9_2a05': '대전', 'Q9_2a06': '충북', 'Q9_2a07': '충남', 'Q9_2a08': '세종',
    'Q9_2a09': '경북', 'Q9_2a10': '경남', 'Q9_2a11': '대구', 'Q9_2a12': '울산',
    'Q9_2a13': '부산', 'Q9_2a14': '광주', 'Q9_2a15': '전북', 'Q9_2a16': '전남', 'Q9_2a17': '제주'
}

# [3] Melt + 지역 병합
df_melted = df_cluster1_2024.melt(
    id_vars=region_cols,
    value_vars=satisfaction_cols,
    var_name='activity_code',
    value_name='score'
)
df_melted['activity'] = df_melted['activity_code'].map(satisfaction_labels)

df_melted['region_name'] = None
for col in region_cols:
    df_melted.loc[df_melted[col].notna(), 'region_name'] = region_labels[col]
df_melted = df_melted.drop(columns=region_cols)
df_melted = df_melted[df_melted['score'].between(1, 5)]

# [4] Top5 활동 항목 추출 및 평균 점수 결합
activity_counts = df_melted.groupby(['region_name', 'activity']).size().reset_index(name='count')
top5 = (
    activity_counts
    .sort_values(['region_name', 'count'], ascending=[True, False])
    .groupby('region_name')
    .head(5)
)
mean_scores = df_melted.groupby(['region_name', 'activity'])['score'].mean().reset_index(name='mean_score')
top5_with_scores = pd.merge(top5, mean_scores, on=['region_name', 'activity'])

# [5] 파이차트 시각화
regions = top5_with_scores['region_name'].unique()
num_regions = len(regions)
cols = 4
rows = (num_regions + cols - 1) // cols
fig, axes = plt.subplots(rows, cols, figsize=(16, 4 * rows))
axes = axes.flatten()

for idx, region in enumerate(regions):
    region_data = top5_with_scores[top5_with_scores['region_name'] == region]
    labels = region_data['activity']
    scores = region_data['mean_score']

    axes[idx].pie(
        scores,
        labels=[f"{label}\n({score:.2f})" for label, score in zip(labels, scores)],
        startangle=140,
        colors=plt.cm.tab20.colors
    )
    axes[idx].axis('equal')
    axes[idx].set_title(f'{region}', fontsize=12)

for i in range(len(regions), len(axes)):
    fig.delaxes(axes[i])

plt.suptitle('지역별 Top5 활동 평균 만족도 (활동명 + 점수)', fontsize=16)
plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()

"""# 충남 - 자연경관"""

# Q9_2a 컬럼 리스트 추출
q9_cols = [col for col in df_cluster1_2024.columns if col.startswith('Q9_2a')]

# 충남이 포함된 행만 필터링
df_chungnam_2024 = df_cluster1_2024[df_cluster1_2024[q9_cols].eq('충남').any(axis=1)]

# 활동 여부 필터링
is_active = df_chungnam_2024['Q8a03'] == '자연경관 감상'

# 감상자 수 및 비율
activity_count = is_active.sum()
total = len(df_chungnam_2024)
activity_rate = activity_count / total if total > 0 else 0

# 만족도 매핑 후 평균 계산
satisfaction_map = {
    '① 매우 불만족': 1,
    '② 불만족': 2,
    '③ 보통': 3,
    '④ 만족': 4,
    '⑤ 매우 만족': 5
}

# 만족도 매핑 → 숫자로 변환
satisfaction_scores = df_chungnam_2024.loc[is_active, 'Q12a03'].map(satisfaction_map)
mean_satisfaction = satisfaction_scores.mean()

# 출력
print(f"🔹 2024 충남 방문자 수: {total}명")
print(f"🔹 자연경관 감상자 수: {activity_count}명")
print(f"🔹 자연경관 감상 비율: {activity_rate*100:.1f}%")
print(f"🔹 자연경관 만족도 평균: {mean_satisfaction:.2f}")

import matplotlib.pyplot as plt

# 시각화용 데이터 준비
labels = ['충남']
activity_values = [activity_rate * 100]         # 활동 비율 (%)
satisfaction_values = [mean_satisfaction]       # 평균 만족도

fig, ax1 = plt.subplots(figsize=(6, 4))

# 막대 그래프: 자연경관 감상 비율
ax1.bar(labels, activity_values, color='skyblue')
ax1.set_ylabel('자연경관 감상 비율 (%)', color='skyblue')
ax1.set_ylim(0, 100)
ax1.tick_params(axis='y', labelcolor='skyblue')

# 선 그래프: 평균 만족도
ax2 = ax1.twinx()
ax2.plot(labels, satisfaction_values, color='orange', marker='o', linewidth=2)
ax2.set_ylabel('자연경관 만족도 (평균)', color='orange')
ax2.set_ylim(0, 5)
ax2.tick_params(axis='y', labelcolor='orange')

# 제목 및 레이아웃
plt.title('충남 자연경관 감상 활동 비율 및 만족도 (2024)')
plt.tight_layout()
plt.show()